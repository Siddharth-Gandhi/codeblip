public void serialize(LittleEndianOutput out) {out.writeShort(field_1_vcapacity);}
public void addAll(BlockList<T> src) {if (src.size == 0)return;for (int srcDirIdx = 0;for (int srcDirIdx = 0; srcDirIdx < src.tailDirIdx; srcDirIdx++)addAll(src.tailBlock, 0, src.tailBlkIdx);}if (src.tailBlock!= null)addAll(src.tailBlock, 0, src.tailBlockSize);}
public void writeByte(byte b) {if (blockSize > 0) {blocks.add(currentBlock);}currentBlock = new byte[blockSize];upto++;}else {blocks.add(new byte[blockSize]);upto++;}return;}
public String toString() {return this.toString();}
public DeleteDomainResult deleteDomain(String path) {return executeDeleteDomain(path);}
public long ramBytesUsed() {return fst == null? 0 : fst.ramBytesUsed();}
public final String getRawMessage() {byte[] raw = buffer;int msgB = RawParseUtils.decodeMessage(raw, 0);if (msgB < 0) {return "";}RawParseUtils.decode(raw, msgB, raw.length);}return raw;}
public POIFSFile ( ) {HeaderBlock headerBlock = new HeaderBlock( bigBlockSize );_property_table = new PropertyTable( bigBlockSize );_elements = new ArrayList<>();_root = null;}
public void init(int address) {slice = pool.buffers[address >> ByteBlockPool.BYTE_BLOCK_SHIFT];assert slice!= null;upto = address & ByteBlockPool.BYTE_BLOCK_MASK;assert upto >= 0;}
public SubmoduleAddCommand setPath(String path) {this.path = path;return this;}
public ListFindingsResult listFindings(ListFindingsRequest request) {request = beforeClientExecution(request);return executeListFindings(request);}
public QueryParserTokenManager(CharStream stream, int lexState) {this(stream, lexState);}
public GetSortedSetResult getSortedSet(GetSortedSetRequest request) {request = beforeClientExecution(request);return executeGetSortedSet(request);}
public ModifyStrategyRequest() {super("aegis", "2016-12-11", "ModifyStrategy", "vcpaegis");setMethod(MethodType.POST);}
public boolean ready() throws IOException {synchronized (lock) {if (in == null) {throw new IOException("InputStreamReader is closed");}try {return bytes.hasRemaining() || in.available() > 0;} catch (IOException e) {throw e;}}}
public RoaringDocIdSet getRoaringDocIdSet() {return RoaringDocIdSet.getOrCreateDocIdSet().get(docId);}
public int read(byte[] buffer, int offset, int length) {if (buffer == null) {throw new NullPointerException("buffer == null");}Arrays.checkOffsetAndCount(buffer.length, offset, length);if (length == 0) {return 0;}int ctrls = count - pos;for (int i = 0; i < ctrls; i++) {buffer[offset + i] = (byte) buffer[pos + i];}pos += ctrls;return ctrls;}
public OpenNLPSentenceBreakIterator(NLPSentenceDetectorOp sentenceOp) {this.sentenceOp = sentenceOp;}
public void print(String str) {if (str!= null) {sb.println(str);} else {sb.println(0);}}
public NotImplementedFunctionException(String functionName, Exception cause) {super(functionName, cause);}
public final void step() {return v;}
public void readBytes(byte[] b, int offset, int len, boolean useBuffer) throws IOException {final int available = bufferSize - bufferPosition;if (len <= available) {if (available > 0) {System.arraycopy(buffer, bufferPosition, b, offset, len);}bufferPosition += len;} else {if (useBuffer && len < bufferSize) {fill();if (bufferLength < len) {System.arraycopy(buffer, 0, b, offset, bufferSize);throw new EOFException(this);}}long after = bufferStart + bufferPosition + len;if (after > length) {throw new EOFException(this);}readInternal(b, offset, len);bufferStart = after;bufferLength = 0;}}
public void run() {while (true) {output.writeByte(0);} else {output.writeByte(1);}}
public void remove() {if (currentPutField == null) {throw new NullPointerException();}remove();}
public ModifyClusterResult modifyCluster(ModifyClusterRequest request) {request = beforeClientExecution(request);return executeModifyCluster(request);}
public void setParams(String params) {super.setParams(params);fallback = "";StringTokenizer st = new StringTokenizer(params, ",");if (st.hasMoreElements()) {fallback += st.nextElement();}if (st.hasMoreElements()) {fallback += st.nextElement();}if (st.hasMoreElements()) {fallback += st.nextElement();}return;}
public DeleteDocumentationResult deleteDocumentation(DeleteDocumentationRequest request) {request = beforeClientExecution(request);return executeDeleteDocumentation(request);}
public boolean equals(Object obj) {if (!(obj instanceof FacetLabel)) {return false;}for (int i = 0; i < length; i++) {return false;}return true;}
public GetInstanceDetailResult getInstanceDetail() {return getInstanceDetail(request);}
public void patter ( ) {}
public String getSheetName(int sheetIndex) {return getBoundSheetRec(sheetIndex).getSheetname();}
public GetDashboardResult getDashboard() {return getDashboard(request);}
public void associateAccount() {executeAssociateAccount(new AssociateAccountRequest());}
public void addMultipleBlanks(MultiBlankRecord mbr) {for (int j = 0; j < mbr.getNumColumns(); j++) {BlankRecord br = new BlankRecord();br.setColumn(j + mbr.getFirstColumn());br.setRow(mbr.getRow());br.setXFIndex(mbr.getXFAt(j));insertCell(br);} }
public static String quote(String string) {StringBuilder sb = new StringBuilder();sb.append("\\Q");for (int i = 0; i < string.length(); i++) {sb.append(String.valueOf(i));}return sb.toString();}
public final ByteBuffer putInt(int value) {throw new ReadOnlyBufferException();}
public ArrayPtg(Object[] values2d) {int nColumns = values2d.length;int nRows = values2d.length;_nColumns = nColumns;_nRows = nRows;for (int r = 0; r < nRows; r++) {Object[] rowData = values2d[r];for (int c = 0; c < nColumns; c++) {v[getValueIndex(c, r)] = rowData[c];}}_arrayValues = vv;_reserved0Int = 0;_reserved1Short = 0;_reserved2Byte = 0;}}
public GetIpIPv6AddressResult getHostIPv6Address(String host) {return getHostIPv6Address(host);}
public String toString() {final StringBuilder sb = new StringBuilder(64);sb.append(getClass().getSimpleName()).append(" [");sb.append("]");return sb.toString();}
public String toString(String field) {return "ToChildBlockJoinQuery(" + field + ")";}
public void inc(int i) {if (i == -1) {return;}inc((long) i);}
public UpdateConfigurationSetResult updateConfigurationSet(UpdateConfigurationSetRequest request) {request = beforeClientExecution(request);return executeUpdateConfigurationSet(request);}
public int getNextXBATBlockOffset() {return getXBATBlockOffset() * LittleEndianConstants.INT_SIZE;}
public void multiplyByPowerOfPower(int pow10) {PowerPower pt = PowerPower.getInstance(Math.abs(pow10));if (pow10 < 0) {mulMove(pt._divisor, pt._divisorScale);} else {mulMove(pt._divisor, pt._divisorScale);} else {mulMove(pt._divisor, pt._divisorScale);}return;}
public String toString() {StringBuilder builder = new StringBuilder();for (int i = 0; i < length; i++) {builder.append(this.getCharAt(i));if (i < length - 1) {builder.append(this.getCharAt(i));}return builder.toString();}
public void setCredentialProvider(ECSMetadataServiceCredentialsProvider fetcher) {this.provider = fetcher;this.provider.setRoleName(roleName);}
public void setProgressMonitor(ProgressMonitor pm) {for (int i = 0; i < 1000; i++) {ProgressMonitor monitor = new ProgressMonitor(pm);for (int i = 0; i < 1000; i++) {ProgressMonitor monitor = new ProgressMonitor(pm);for (int i = 0; i < 1000; i++) {ProgressMonitor monitor = new ProgressMonitor(pm);}}
public void reset() {if (!eof) {parseEntry = new ParseEntry();}}
public E previous() {return iterator.previous();}
public String getNewPrefix() {return prefix + "newPrefix";}
public int indexOfValue(int value) {for (int i = 0; i < mSize; i++) {if (mValues[i] == value) return i;}return -1;}
public List<CharsRef> removeWords(char[] word, int length) {List<CharsRef> stem = stem(word, length);if (stem.size() < 2) stem = stem.get(0);if ( stem.size() < 2 ) stem = stem.get(1);if ( stem.size() < 2 ) stem = stem.get(0);if ( stem.size() < 2 ) stem = stem.get(1);if ( stem.size() == 1 ) stem = stem.get(0);else stem.set(s, 0, stem.length());postings.add(s);postings.add(s);}return stem;}
public GetResponse() {return new GetResponse();}
public void setPosition(long position) {currentBlockIndex = (int) position >> blockBits;currentBlock = blocks[currentBlockIndex];currentBlockUpto = (int) position & blockMask;}
public long skip(long n) {return (long) Math.min(ptr, n);}
public BootstrapActionDetail() {return new BootstrapActionDetail(this);}
public void serialize(LittleEndianOutput out) {out.writeShort(field_1_row);out.writeShort(field_2_col);out.writeShort(field_3_flags);out.writeShort(field_4_shapeid);out.writeByte(field_5_hasMultibyte? 0x01 : 0x00);if (field_5_hasMultibyte) {StringUtil.putUnicodeLE(field_6_author, out);} else {StringUtil.putCompressedUnicode(field_6_author, out);}if (field_5_hasMultibyte) {StringUtil.putUnicodeLE(field_5_author, out);}if (field_5_hasMultibyte) {StringUtil.putUnicodeLE(field_6_author, out);} else {StringUtil.putShort(field_6_author, out);}if (field_5_hasMultibyte) {StringUtil.putByte(field_6_author, out);} else {StringUtil.putByte(field_6_author, out);}if (field_5_hasMultibyte) {StringUtil.putUnicodeLE(field_6_author, out);} if (field_5_hasMultibyte) {StringUtil.putByte(field_6_author, out
public int lastIndexOf(String s) {return lastIndexOf(s, count);}
public void write () {}
public void setSection(String section, String fragment) {ConfigSnapshot res = state.get();res = new ConfigSnapshot(fragment, fragment);} while (true) {if (fragment == null) {res = new ConfigSnapshot(fragment, fragment);} else if (fragment.length == 0) {res = new ConfigSnapshot(fragment, fragment);} else if (fragment.length == 0) {res = new ConfigSnapshot(fragment, fragment);} else if (fragment.length == 0) {res = new ConfigSnapshot(fragment, fragment);} else if (fragment.length > 1) {res.set(fragment, fragment);} else {if (fragment.length > 1) {res.set(fragment, fragment);}}
public String getName() {return this.name;}
public void addSubRecord(int index, SubRecord element) {subrecords.add( index, subRecord);}
public void             }
public TokenStream create(TokenStream input) {return new DoubleMultisetFilter(input, maxCodeLength, integrate);}
public long length() {return super.length();}
public void setValue(boolean newValue) {return value;}
public Pair(ContentSource oldSource, ContentSource newSource) {this.oldSource = oldSource;this.newSource = newSource;}
public int get(int i) {if (count <= 0) {throw new ArrayIndexOutOfBoundsException(i);}return elements.get(i);}
public CreateRepoRequest() {super("cr", "2016-06-07", "CreateRepo", "cr");setUriPattern("/repos");setMethod(MethodType.PUT);}
public boolean isDelta() {return delta!= null && delta.delta > 0;}
public void remove() {if (expectedModCount == list.modCount) {if (lastLink!= null) {Link<ET> next = lastLink.next;Link<ET> previous = lastLink.previous;next.next = next;if (lastLink == link) {pos--;link = previous;lastLink = null;expectedModCount++;list.size--;list.modCount++;} else {throw new ConcurrentModificationException();}} else {throw new ConcurrentModificationException();}}
public MergeShardsResult mergeShards(MergeShardsRequest request) {request = beforeClientExecution(request);return executeMergeShards(request);}
public AllocateConnectionResult allocateConnection(AllocateConnectionRequest request) {request = beforeClientExecution(request);return executeAllocateConnection(request);}
public int getStartIndex() {return this.startIndex;}
public static WeightedTerm[] getTerms(Query query) {return getTerms(query, false);}
public ByteBuffer compact() {throw new ReadOnlyBufferException();}
public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final int byte0 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = (byte0 & 3) << 4) | (byte1 >>> 4);final int byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = (byte1 & 15) << 2) | (byte2 >>> 6);values[valuesOffset++] = (byte2 & 63);}}
public String getSoftwareName() {if (getPath().equals(getPath()) || getPath() == null)throw new IllegalArgumentException();String s = getPath();String[] elements = path.split("[\\" + File.separatorChar + "/");if (elements.length == 0)throw new IllegalArgumentException();String result = elements[elements.length - 1];if (Constants.DOCS.equals(result)) {result = elements[elements.length - 2];} else if (result.endsWith(Constants.DOCS_EXT)) {result = result.substring(0, elements.length - 1);} else {if (result.endsWith(Constants.DOT_GIT.length())) {result = result.substring(0, elements.length - 2);} else {if (result.endsWith(Constants.DOT_GIT.length())) {result = result.substring(elements.length - 1);} else {if (result.endsWith(Constants.DOCS_EXT)) {result = result.substring(0, elements.length - 1);} else {if (result.endsWith(Constants.DOT_GIT.length())) {result = result.substring(0, elements.length - 2);} else {if (result.endsWith(Constants.DOT_GIT.length())) {result = result.substring(elements.length - 1);} else {if (result.endsWith(Constants.DOT_GIT.length())) {result = result.substring(0, elements.length - 1);}}
public DescribeNotebookInstanceLifecycleConfigResult describeNotebookInstanceLifecycleConfig(DescribeNotebookInstanceLifecycleConfigRequest request) {request = beforeClientExecution(request);return executeDescribeNotebookInstanceLifecycleConfig(request);}
public String getContentDisposition() {return contentDisposition;}
public CreateVpnConnectionResult createVpnConnection(CreateVpnConnectionRequest request) {request = beforeClientExecution(request);return executeCreateVpnConnection(request);}
public DescribePeopleResult describePeople(DescribePeopleRequest request) {return describePeople(request);}
public ListExecutionsResult listExecutions(ListExecutionsRequest request) {request = beforeClientExecution(request);return executeListExecutions(request);}
public DescribeJobRequest(String vaultName, String jobId) {this.vaultName = vaultName;this.jobId = jobId;}
public EscherRecord getEscherRecord(int index) {return escherRecords.get(index);}
public GetResponse() {return new GetResponse();}
public DeleteSmsResult deleteSms() {return deleteSms();}
public void invoke() { float v = 0.0f; float v = 0.0f; float v = 0.0f; float v = 0.0f;float v = 0.0f;float v = 0.0f;float v = 0.0f;float v = 0.0f;float v = 0.0f;float v = 0.0f;float v = 0.0f;float v = 0.0f;return v;}}
public void translate(String text) {if (text == null) {throw new NullPointerException();}translate(text, 0, text.length());}
public BlendedTermQuery build() {return new BlendedTermQuery(ArrayUtil.copyOfSubArray(terms, 0, numTerms),ArrayUtil.copyOfSubArray(boosts, 0, numTerms),rewriteMethod);}
public NotIgnoredFilter(int workdirTreeIndex) {this.index = workdirTreeIndex;}
public void field_1_formatFlags(RecordInputStream in) {if (in == null) {field_1_formatFlags = in.readShort();} else { field_1_formatFlags = in.readShort();} else { if (in == null) {field_1_formatFlags = in.readShort();} else { if (in == null) {field_1_formatFlags = in.readShort();} else { if (in == null) {field_1_formatFlags = in.readShort();} else {if (in == null) {field_1_formatFlags = in.readShort();} else {if (in == null) {field_1_formatFlags = in.readShort();}} else { if (in == null) {field_1_formatFlags = in.readShort();}}
public GetPictureRequest() {super("CloudPhoto", "2017-07-11", "GetPicture", "http://www.google.com/p/google-cloud/issues/detail");super("CloudPhoto", "2017-07-11", "GetPicture", "http://www.google.com/p/google-cloud/issues/detail");super("CloudPhoto", "2017-07-11", "GetPicture", "http://www.google.com");}
public DescribeTransitOutputsResult describeTransitOutputs(DescribeTransitOutputsRequest request) {request = beforeClientExecution(request);return describeTransitOutputs(request);}
public PutPersonResult putPerson(PutPersonRequest request) {request = beforeClientExecution(request);return executePutPerson(request);}
public final void step () { return ; }
public String toString() {String symbol = "";if (startIndex >= 0 && startIndex < getInputStream().size()) {symbol = getInputStream().getText(Interval.of(startIndex, startIndex));}else {symbol = StringUtils.escapeWhitespace(symbol, false);}return String.format(LocaleInfo.getCurrentLocale(), "0:('{1}')', symbol);}
public E peek() {return this.peek();}
public CreateWorkspacesResult createWorkspaces() {return createWorkspaces();}
public NumberFormatIndexRecord clone() {NumberFormatIndexRecord rec = new NumberFormatIndexRecord();rec.field_1_formatIndex = field_1_formatIndex;return rec;}
public DescribeRepositoriesResult describeRepositories() {return describeRepositories(request);}
public final intArray(int capacity) {this.capacity = capacity;this.values = new int[capacity];this.positions = new int[capacity];this.positions = new int[capacity];this.positions = new int[capacity];for (int i = 0; i < capacity; i++) {this.positions.add(i++);this.positions.add(i++);}}
public final void create() { return ; }
public CreateDistributionResult createDistribution(CreateDistributionRequest request) {request = beforeClientExecution(request);return executeCreateDistribution(request);}
public RandomAccessFile(String fileName, String mode) throws IOException {this(new File(fileName), mode);}
public DeleteWorkspaceImageResult deleteWorkspaceImage(DeleteWorkspaceImageRequest request) {request = beforeClientExecution(request);return executeDeleteWorkspaceImage(request);}
public final String toHex(int value) {return toHex(value, 16);}
public void run() {if (progressMonitor == null) {progressMonitor.end();} else {progressMonitor.end();} }
public final Color getColor(int index) {if (index == HSSFColor.ANSI.getIndex()) {return new Color(index, color);}return null;}
public ValueEval evaluate(ValueEval[] operands, int srcRow, int srcCol) {throw new RuntimeException(_functionName);}
public void serialize(LittleEndianOutput out) {out.writeShort(field_1_number_crn_records);out.writeShort(field_2_sheet_table_length);}
public DescribeDBInstanceVersionsResult describeDBInstanceVersions() {return describeDBInstanceVersions(new DescribeDBInstanceVersionsRequest());}
public FormatRun(final short character, int fontIndex) {this._character = character;this._fontIndex = fontIndex;}
public static byte[] toBigEndianBytes(char[] chars, int offset, int length) {byte[] result = new byte[length * 2];for (int i = offset; i < end; ++i) {result[resultIndex++] = (byte) chars[i];}return result;}
public UploadImageResult uploadImage(UploadImageRequest request) {request = beforeClientExecution(request);return executeUploadImage(request);}
public List<Token> getHiddenTokensToLeft(int tokenIndex) {return getHiddenTokensToLeft(tokenIndex, -1);}
public boolean equals(Object obj) {if (!super.equals(obj)) {return false;}if (getClass()!= obj.getClass()) {return false;}AutomatonQuery other = (AutomatonQuery) obj;if (!other.getClass().equals(other.getClass())) {return false;}if (!term.equals(other.term)) {return false;}return true;}
public SpanQuery makeSpanClause() {List<SpanQuery> spanQueries = new ArrayList<>();for (SpanQuery q : spanQueries) {q.setValue(q.getValue());spanQueries.add(q.getKey());}if (spanQueries.size() == 1) {return spanQueries.get(0);}return new SpanQuery(spanQueries.toArray(new SpanQuery[spanQueries.size()]));}
public void          ) ; }
public final FieldInfo getFieldInfo(String fieldName) {return getFieldInfo(fieldName, Integer.valueOf(fieldName));}
public DescribeEventResult describeEvent(DescribeEventRequest request) {request = beforeClientExecution(request);return executeDescribeEvent(request);}
public void run() {}
public UpdateStackResult updateStack(UpdateStackRequest request) {request = beforeClientExecution(request);return executeUpdateStack(request);}
public ModifyLoadBalancerResult modifyLoadBalancer(ModifyLoadBalancerRequest request) {request = beforeClientExecution(request);return executeModifyLoadBalancer(request);}
public SetInstanceProtectionResult setInstanceProtection(SetInstanceProtectionRequest request) {request = beforeClientExecution(request);return executeSetInstanceProtection(request);}
public ModifyDBInstanceResult modifyDBInstance(ModifyDBInstanceRequest request) {request = beforeClientExecution(request);return executeModifyDBInstance(request);}
public void add(char[] output, int offset, int len, int endOffset, int posLength) {if (count == outputs.length) {CharsRef[] next = new CharsRef[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];System.arraycopy(outputs, 0, next, 0, count);outputs = next;}if (count == endOffsets.length) {int[] next = new int[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];System.arraycopy(endOffsets, 0, next, 0, count);endOffsets = next;}if (count == outputs.length) {outputs[count] = new CharsRef();}outputs[count].copyChars(output, offset, len);endOffsets[count] = endLength;count++;}
public FetchLibrariesRequest() {super("CloudPhoto", "2017-07-11", "FetchLibraries", "cloudphoto");}                                                                       ) ; return true ; }
public boolean exists() {return true;}
public FilterOutputStream(OutputStream out) {this.out = out;}
public ScaleClusterRequest() {super("SC", "2016-06-07", "ScaleCluster", "sc");setUriPattern("/clusters/[ClusterId]");setMethod(MethodType.PUT);}
public DataValidationConstraint createTimeConstraint(int operatorType, String formula1, String formula2) {return DVConstraint.createTimeConstraint(operatorType, formula1, formula2);}
public ListObjectsResult listObjects() {return listObjects(request);}
public DescribeClusterResult describeCluster(DescribeClusterRequest request) {return describeCluster(request);}
public void setSharedFormula(boolean flag) {field_5_options = new FormulaOptions(flag);}
public boolean isReuseObjects() {return isReuseObjects();}
public ErrorNode addErrorNode(Token errorToken) {ErrorNodeImpl t = new ErrorNodeImpl(errorToken);addChild(t);return t;}
public LinguishStemFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public RemoveSubscriptionResult removeSubscription(String subscriptionId) {return removeSubscription(subscriptionId);}
public static TokenFilterFactory forName(String name, Map<String, String> args) {return factory.newInstance(name, args);}
public AddAlbumPhotosRequest() {super("CloudPhoto", "2017-07-11", "AddAlbumPhotos", "cloudphoto");}                                                                   } ) ; return this; }
public GetLikelihoodResult getLikelihood(GetLikelihoodRequest request) {return getLikelihood(request);}
public TreeFilter clone() {return new Binary(a.clone(), b.clone());}
public final void  move () {
public boolean hasArray() {return true;}
public UpdatePersonalDataResult updatePersonalData(UpdatePersonalDataRequest request) {request = beforeClientExecution(request);return executeUpdatePersonalData(request);}
public void unwriteProtectWorkbook() {records.remove(writeProtect);fileWriter = null;writeProtect = null;}
public SrSemanticParser(boolean dedup, boolean append, Analyzer analyzer) {super(dedup, analyzer);this.append = append;}
public DescribeInstancesResult describeInstances() {return describeInstances();}
public byte[] getObjectData() {return getObjectData();}
public GetContactAttributesResult getContactAttributes() {return getContactAttributes(request);}
public String toString() {return String.valueOf(getKey());}
public ListTextOutputsResult listTextOutputs(ListTextOutputsRequest request) {request = beforeClientExecution(request);return executeListTextOutputs(request);}
public GetContactResult getContact(GetContactRequest request) {request = beforeClientExecution(request);return executeGetContact(request);}
public static int lookupIndexByName(String name) {final FunctionMetadata fi = getInstance().getFunctionByNameInternal(name);if (fi == null) {return -1;}return fi.getIndex();}
public DescribeAnalysesResult describeAnalyses(DescribeAnalysesRequest request) {request = beforeClientExecution(request);return executeDescribeAnalyses(request);}
public static ObjectId updateId(String message, ObjectId changeId) {return updateId(message, changeId, false);}
public long getObjectSize(AnyObjectId objectId, int typeHint) throws MissingObjectException {return getObjectSize(objectId, typeHint);}
public void run() {}
public PutLifecycleEventHookExecutionStatusResult putLifecycleEventHookExecutionStatus(PutLifecycleEventHookExecutionStatusRequest request) {request = beforeClientExecution(request);return executePutLifecycleEventHookExecutionStatus(request);}
public NumberPtg(LittleEndianInput in) {field_1_value = in.readDouble();}                                                                           
public GetFieldOptionsResult getFieldOptions() {return getFieldOptions(request);}
public DescribeDetectorResult describeDetector(DescribeDetectorRequest request) {request = beforeClientExecution(request);return executeDescribeDetector(request);}
public ReportInstanceResult reportInstance() {return reportInstance();}
public DeleteAlarmResult deleteAlarm(Request request) {request = beforeClientExecution(request);return executeDeleteAlarm(request);}
public void call () {}
public RdfCtsSubRecord() {encoded = new byte[ENCODED_SIZE];}int numChars = 0;for (int i = 0; i < numChars; i++) {encoded[i] = (char) i;if (reserved[i] == null) {invalid[i] = 0;break;}if (reserved[i] == null) {invalid[i] = 0;break;}if (reserved[i] == null) {invalid[i] = 0;}}
public void             }
public GetDedicatedIpResult getDedicatedIp(GetDedicatedIpRequest request) {request = beforeClientExecution(request);return executeGetDedicatedIp(request);}
public final void step () { return ; }
public ListStreamsResult listStreams() {return listStreams(new ListStreamsRequest());}
public DeleteLoadBalancerPolicyRequest(String loadBalancerName, String policyName) {setLoadBalancerName(loadBalancerName);setPolicyName(policyName);}
public void run() {while (true) {switch (getState()) {case SET:break;case UNSET:break;case UNSPECIFIED:break;case CUSTOM:break;case CUSTOM:break;case CUSTOM:break;case CUSTOM:break;case CUSTOM:break;default:break;}}
public UnbufferedCharStream(int bufferSize) {n = 0;data = new int[bufferSize];}
public GetOperationsResult getOperations() {return executeGetOperations(new GetOperationsRequest());}
public void copyRawTo(int b, int o) {B.writeInt(b, o + 4, o + 8);B.writeInt(b, o + 16, 0);B.writeInt(0);return;}
public WindowOneRecord(RecordInputStream in) {field_1_h_drop = in.readShort();field_2_v_drop = in.readShort();field_3_width = in.readShort();field_4_height = in.readShort();field_5_options = in.readShort();field_6_active_sheet = in.readShort();field_7_active_tab_width_ratio = in.readShort();}
public StopWorkspacesResult stopWorkspaces() {return stopWorkspaces();}
public void close() throws IOException {if (isOpen) {try {writer.close();} finally {writer.close();}}}
public DescribeMatchmakingResult describeMatchmaking(DescribeMatchmakingRequest request) {request = beforeClientExecution(request);return executeDescribeMatchmaking(request);}
public String getPatron(int wordId, char[] sentence, int off, int len) {return null; }sentence = "" + wordId + " " + sentence + " " + sentence + " " + height + " distance" + " normalized" + " distance" + " normalized" + " distance" + " distance" + " normalized" + " distance" + " distance to null" + " distance from null to null" + " distance to null" + " distance from null to null" + " distance from null" + " distance from null to null" + " distance from null to null"; }
public String getPath() {return this.path;}
public static double norms(double[] v) {double r = Double.NaN;if (v!=null && v.length >= 1) {double m = 0;double s = 0;int n = v.length;for (int i = 0; i < n; i++) {s += v[i];}m = s / n;s = 0;for (int i = 0; i < n; i++) {s += v[i];}r = (n == 1)? 0: s;}return r;}
public DescribeResizeResult describeResize(DescribeResizeRequest request) {request = beforeClientExecution(request);return executeDescribeResize(request);}
public boolean passedThroughNonGreedyDecision() {return passedThroughNonGreedyDecision;}
public int end() {return -1;}
public void traverse(CellHandler handler) {int firstRow = range.getFirstRow();int lastRow  = range.getLastRow();int firstColumn = range.getFirstColumn();int lastColumn  = range.getLastColumn();int width = lastColumn - firstColumn + 1;SimpleCellWalkContext ctx = new SimpleCellWalkContext();for (int rowNumber = firstRow; rowNumber <= lastRow; ++rowNumber) {currentRow = sheet.getRow(rowNumber);if (currentRow == null) {continue;}if (isEmpty(currentRow) &&!traverseEmptyCells) {continue;}ctx.ordinalNumber = (ctx.rowNumber - firstRow) * width + (ctx.colNumber - firstColumn + 1);handler.onCell(currentCell, ctx);} }
public int getReadIndex() {return _readIndex;}
public int compareTo(ScoreTerm other) {if (this.term.equals(other.term)) {return this.term.compareTo(other.term);} else {return this.term.compareTo(other.term);}
public int normalize(char s[], int len) {for (int i = 0; i < len; i++) {switch (s[i]) {case FLAS_YEH:case FLAS_YEH:case FLAS_YEH:case FLAS_YEH:case FLAS_YEH:case FLAS_YEH:case FLAS_YEH:case FLAS_YEH:break;break;break;break;}return len;}
public final void serialize(LittleEndianOutput out) {out.writeShort(options);}
public void run() {while (true) {if (pending == null) {break;} else if (pendingOff == 0) {break;} else if (pendingOff == 0) {break;} else {break;}}}
public KeySchemaElement(String attributeName, KeyType keyType) {_attributeName = attributeName;_keyType = keyType;}
public GetAssignmentResult getAssignment(GetAssignmentRequest request) {request = beforeClientExecution(request);return executeGetAssignment(request);}
public boolean hasObject(ObjectId id) {return findOffset(id)!= -1;}
public GroupingSearch setAllGroups(boolean allGroups) {this.allGroups = new GroupingSearch(allGroups);return this;}
public void setMultiValue(String dimName, boolean v) {synchronized (this) {if (!fieldTypes.containsKey(dimName)) {fieldTypes.put(dimName, Boolean.valueOf(v));} else {fieldTypes.remove(dimName);}}}
public int getCellsCount() {int size = 0;for (Character c : cells.values()) {size++;}return size;}
public DeletePersonResult deletePerson(PersonRequest request) {request = beforeClientExecution(request);return executeDeletePerson(request);}
public DeleteLifecyclePolicyResult deleteLifecyclePolicy(DeleteLifecyclePolicyRequest request) {request = beforeClientExecution(request);return executeDeleteLifecyclePolicy(request);}
public final void write() {}
public void invoke () { return public void invoke() {
public static int getMaximumSetSize(int maxNumberOfValuesExpected, float requiredSaturation) {for (int t : _usedBitSetSizes) {int estimatedSaturation = (int) (t * requiredSaturation) ;int expectedNumValuesRequired = (int) (t * expectedSaturation) + 1;if (expectedNumValuesRequired > 0) {return expectedNumValuesRequired;}}}
public DescribeDashboardResult describeDashboard(DescribeDashboardRequest request) {return describeDashboard(request);}
public CreateSegmentResult createSegment(CreateSegmentRequest request) {request = beforeClientExecution(request);return executeCreateSegment(request);}
public String toString(){StringBuilder buffer = new StringBuilder();buffer.append("[DBCELL]\n");buffer.append("   .rowoffset = ").append(Integer.toHexString(getRowOffset())).append("\n");for (int k = 0; k < field_2_cell_offsets.length; k++) {buffer.append("   .cell_").append(k).append(" = ").append(HexDump.shortToHex(field_2_cell_offsets[k])).append("\n");}buffer.append("/DBCELL]\n");return buffer.toString();}
public String getOldVersion() {return oldVersion;}
public void step() {}
public BlendedTermQuery clone() {return new BlendedTermQuery(ArrayUtil.copyOfSubArray(terms, 0, numTerms),ArrayUtil.copyOfSubArray(boosts, 0, numTerms),rewriteMethod);}
public void translate(String text) {if (text == null) {throw new NullPointerException();}translate(text, 0, text.length());}
public final void append() {if ( cs==null ) {appendNull();} else {append(cs, 0, cs.length());}return this;}
public ListAvailableInstancesResult listAvailableInstances(ListAvailableInstancesRequest request) {request = beforeClientExecution(request);return executeListAvailableInstances(request);}
public static double averageep(double v) {double r = 0;double m = 0;for (int i = 0, iSize = v.length; i < iSize; i++) {s += v[i];}m = s / v.length;s = 0;for (int i = 0, iSize = v.length; i < iSize; i++) {s += Math.abs(v[i] - m);}r = s / v.length;return r;}
public void invoke() { }
public void run() {}
public DBCluster createCluster(CreateClusterRequest request) {request = beforeClientExecution(request);return executeCreateCluster(request);}
public static CharBuffer wrap(char[] array, int start) {CharBuffer buf = new CharBuffer(array, start);buf.position = start;buf.limit = start + charCount;return buf;}
public String getType() {return this.getType();}
public DescribeJobResult describeJob(DescribeJobRequest request) {return describeJob(request);}
public String text() {return this.text;}
public final void v() { v(); }
public } } }
public RenameFaceRequest() {super("CloudPhoto", "2017-07-11", "RenameFace", "cloudphoto");}self("CloudPhoto", "2017-07-11", "RemoveFace", "cloudphoto");}
public char requireChar(Map<String, String> args, String name) {return require(args, name);}
public static String toStringTree(Tree t) {return toStringTree(t, (List<String>)null);}
public void run() {while ( true ) {if ( false ) {break;} else {break;}}}
public GetRepoWorkspaceLogListRequest() {super("cr", "2016-06-07", "GetRepoWorkspaceLogList", "cr");setUriPattern("/repos/[RepoNamespace]/[RepoName]/weblogs/[GitId]/logs");setMethod(MethodType.GET);}
public GetJobResult getJob() {return getJob(new GetJobRequest());}
public void run()                      
public final short getBG2312Id(char ch) {try {final byte[] buffer = Character.getBytes(Charset.UTF_8);if (buffer.length!= 2)return -1;final int b0 = (buffer[0] & 0x0FF) - 1;final int b1 = (buffer[1] & 0x0FF) - 1;return (short) (b0 * 40 + b1);} catch (IllegalArgumentException e) {throw new RuntimeException(e);}
public BatchRefUpdate addCommand(Collection<ReceiveCommand> commands) {return addCommand(commands, new ArrayList<>(Arrays.asList(commits));}
public int checkExternSheet(int sheetNumber) {return orCreateLinkTable.checkExternSheet(sheetNumber);}
public final void x () {
public Query build(QueryNode queryNode) throws QueryNodeException {QueryNode andNode = (QueryNode) queryNode;BooleanQuery bQuery = new BooleanQuery();List<QueryNode> children = andNode.getChildren();if (children!= null) {for (QueryNode child : children) {Object obj = child.getTag(QueryTreeBuilder.QUERY_TREE_TAGID);if (obj!= null) {Query q = (Query) obj;try {bQuery.add(query, BooleanClause.SHOULD);} catch (TooManyClausesException ex) {throw new QueryNodeException(new MessageImpl(QueryParserMessages.EMPTY_MESSAGE), ex);}}}bQuery.setMaximumNumberShouldMatch(andNode.getMaximumMatchedElements());return bQuery;}
public DescribeStreamResult describeStream(DescribeStreamRequest request) {request = beforeClientExecution(request);return executeDescribeStream(request);}
public DescribeDashboardResult describeDashboard(DescribeDashboardRequest request) {return describeDashboard(request);}
public Ref peel(Ref ref) throws IOException {try {return db.peel(ref);} catch (IOException e) {return ref;}}
public long ramBytesUsed() {return RamUsageEstimator.alignObjectSize(RamUsageEstimator.NUM_BYTES_OBJECT_HEADER+ 2 * RamUsageEstimator.NUM_BYTES_OBJECT_REF+ 2 * RamUsageEstimator.NUM_BYTES_OBJECT_REF) + RamUsageEstimator.sizeOf(blocks);}
public GetDomainResultsResult getDomainResults() {return getDomainResults(request);}
public DescribeStackResult describeStack(DescribeStackRequest request) {request = beforeClientExecution(request);return executeDescribeStack(request);}
public void setRule(int idx, HSSFConditionalFormattingRule cfRule) {setRule(idx, (HSSFConditionalFormattingRule)cfRule);}
public CreateResolverResult createResolver(CreateResolverRequest request) {request = beforeClientExecution(request);return executeCreateResolver(request);}
public SeriesIndexRecord(RecordInputStream in) {field_1_index = in.readShort();}
public GetStylesRequest() {super("lubancloud", "2018-07-19", "GetStyles", "luban");super("luba", "2018-07-19", "GetStyles", "luba");super("luba", "2018-07-19", "GetStyles", "luba");super("luba", "2018-07-19", "GetStyles", "luba");}
public void serialize(LittleEndianOutput out) {out.writeShort(field_1_grdset_flag);}
public boolean equals(Object obj) {if (this == obj) {return false;}if (getClass()!= obj.getClass()) {return false;}Tpts other = (Tpts) obj;if (getEndPosition()!= other.getEndPosition()) {return false;}return true;}
public CreateGatewayResult createGateway(CreateGatewayRequest request) {request = beforeClientExecution(request);return executeCreateGateway(request);}
public CreateMemberResult createMember(CreateMemberRequest request) {request = beforeClientExecution(request);return executeCreateMember(request);}
public static double cosr(double[] balance) {return cosr(balance, 0.1d);}
public CreateWorkspaceResult createWorkspace(CreateWorkspaceRequest request) {request = beforeClientExecution(request);return executeCreateWorkspace(request);}
public RevertCommand add(Ref commit) {checkCallable();commits.add(commit);return this;}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval inumberVE) {ValueEval veText1;try {veText1 = OperandResolver.getSingleValue(inumberVE, srcRowIndex, srcColumnIndex);} catch (EvaluationException e) {return e.getErrorEval();}String iNumber = OperandResolver.coerceValueToString(veText1);Matcher m = NUMERIC_NUMBER_PATTERN.matcher(iNumber);boolean result = m.matches();if (result) {return new StringEval(String.valueOf(0));}if (result) {String integerGroup = m.group(GROUP3_IMAGINARY_GROUP).getValue());boolean hasComplexPart = integerGroup.equals("i" || integerGroup.equals("j")) {return new StringEval(0);}if (hasComplexPart) {String sign = "";String integerSign = m.group(GROUP3_IMAGINARY_SIGN).getValue();if (integerSign.length()!= 0 &&!(integerSign.equals("+"))) {sign = integerSign;}String groupComplexNumber = m.group(GROUP4_IMAGINARY_NUMBER).getValue();if (groupComplexNumber.length()!= 0) {return ErrorEval.NUM_ERROR;}return new StringEval(integer);}
public E peekLast() {HashMap.Entry<E, Object> entry = backingMap.peekLastEntry();return (entry == null)? null : entry.getElement();}
public int readUShort() {int ch1 = readUByte();int ch2 = readUByte();return (ch1 << 8) + (ch2 << 0);}
public ModifySnapshotAttributeValueResult modifySnapshotAttributeValue(String snapshotId, SnapshotAttributeName attribute, OperationType operationType) {setSnapshotId(snapshotId);setAttribute(attribute);setOperationType(operationType.toString());}
public ListBalanceResult listBalance(ListBalanceRequest request) {request = beforeClientExecution(request);return executeListBalance(request);}
public final V get(CharSequence text) {if (text == null) {throw new NullPointerException("text must not be null");}return null;}
public void create(String input) {if ( input == null ) { return ;} } }
public String toString() {return this.toString();}
public UploadResult upload(UploadRequest request) {request = beforeClientExecution(request);return executeUpload(request);}
public StringBuilder insert(int i) {insert0(i, Math.toString(i) );return this;}
public final void decode(long[] blocks, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long block = blocks[blocksOffset++ ];for (int shift = 0; shift < iterations; ++i) {values[valuesOffset++ ] = (long) (block >>> shift ) & 3;}}}
public TokenStream create(TokenStream input) {return new EditionFilter(input, dados);}
public boolean filter(Row in, int[] remap) {int sum = 0;for (Cell c : in.cells.values()) {sum += c.cnt;if (replace[c.ref] == 0) {c.ref = -1;}}int depth = sum / 10;boolean active = false;for (Cell c : in.cells.values()) {if (c.cnt < depth && c.cmd >= 0) {c.cnt = 0;c.cmd = -1;}if (c.ref >= 0 || c.ref >= 0) {active = true;}}return active;}
public final Token getToken(int index) {Token t = Token;for (int i = 0; i < index; i++) {if (t.next!= null) t = t.next;el = t.next;return t;}
public String toString() {StringBuilder sb = new StringBuilder();sb.append(getClass().getName()).append(" [ARRAY]\n");sb.append(" range=").append(getRange().toString()).append("\n");sb.append(" options=").append(HexDump.shortToHex(_options)).append("\n");sb.append(" notUsed=").append(HexDump.intToHex(_field3_notUsed)).append("\n");sb.append(" formula: ").append("\n");Ptg[] ptgs = _formula.getTokens();for (int i = 0; i < ptgs.length; i++) {Ptg ptg = ptgs[i];sb.append(ptg.toString()).append(ptg.getRVAType()).append("\n");}sb.append("]");return sb.toString();}
public void run() {}
public void add(int location, E object) {throw new UnsupportedOperationException();}
public void translate() {this.c = c;}
public CreateRepoBuildRuleRequest() {super("cr", "2016-06-07", "CreateRepoBuildRule", "cr");setUriPattern("/repos/[RepoNamespace]/[RepoName]/rules");setMethod(MethodType.PUT);}
public BRef(RefEval re) {_refEval = re;_areaEval = null;_firstRowIndex = re.getRow();_firstColumnIndex = re.getColumn();_height = 1;}
public DrawingManager2(EscherDggRecord dgg) {this.dgg = dgg;}
public void flush() {output.flush();}
public CharsetDecoder reset() {status = INSET;implReset();return this;}
public final Reader in(int size) throws IOException {super(in);buf = new char[size];}
public DescribeCodeResult describeCode() {return describeCode(request);}
public CreateSubnetResult createSubnet(CreateSubnetRequest request) {request = beforeClientExecution(request);return executeCreateSubnet(request);}
public RenameBranchCommand setOldName(String oldName) {checkCallable();this.oldName = oldName;return this;}
public DeleteBranchCommand setForce(boolean force) {checkCallable();return this;}
public StopExecutionResult stopExecution(StopExecutionRequest request) {request = beforeClientExecution(request);return executeStopExecution(request);}
public synchronized void increaseSecondaryProgressBy(int delta) {setSecondaryProgress(delta);}
public void clear() {this.items = new ArrayList<>();for(int i=0; i < this.items.length; i++) {this.items[i] = null;}}
public String getContentDisposition() {return contentDisposition;}
public GetUserSourceAccountRequest() {super("cr", "2016-06-07", "GetUserSourceAccount", "cr");setUriPattern("/users/sourceAccount");setMethod(MethodType.GET);}
public CreateExportResult createExport(CreateExportRequest request) {request = beforeClientExecution(request);return executeCreateExport(request);}
public CreateClusterResult createCluster() {return createCluster(request);}
public boolean equals(Object obj) {if (this == obj) {return false;}if (obj instanceof HSSFCellStyle) {HSSFCellStyle other = (HSSFCellStyle) obj;if (_format == null) {return false;}if (index!= null) {return false;}return true;}return false;}
public void release() {request = beforeClientExecution(request);}
public boolean equals(Object object) {return true;} if (object instanceof Set) {return size() == s.size();} catch (IllegalArgumentException e) {return false;}return false;}
public void setRefLogMessage(String msg, boolean appendStatus) {if (msg == null &&!appendStatus) {refLogMessage = msg;refLogIncludeResult = true;} else {refLogMessage = msg;refLogIncludeResult = appendStatus;}
public int record(RecordInputStream in) {idsr = in.readShort();}
public DetectCarRequest() {super("azai-poc", "202-04-07", "RecognizeCar");super("azai-poc", "202-04-07", "RecognizeCar");super("azai-poc", "202-04-07", "RecognizeCar");super("azai-poc", "202-04-07", "RecognizeCar");super("azai-poc", "202-04-07", "RecognizeCar");}
public final ByteOrder order() {return ByteOrder.nativeOrder();}
public int getDelta() {return (int) Math.ceil((double) Math.random() * 2);}
public boolean isNew() {return true;}
public GetCloudFrontOriginAccessIdentityConfigResult getCloudFrontOriginAccessIdentityConfig(Request request) {request = beforeClientExecution(request);} return executeGetCloudFrontOriginAccessIdentityConfig(request);}
public boolean matches(int symbol, int minVocabSymbol, int maxVocabSymbol) {return true;}
public DeleteTransitResult deleteTransit(DeleteTransitRequest request) {request = beforeClientExecution(request);return executeDeleteTransit(request);}
public static double[] grow(double[] array, int minSize) {assert minSize >= 0: "size must be positive (got " + minSize + ")";if (array.length < minSize) {return new double[oversize(minSize, Double.BYTES));} elsereturn array;}
public CreateTransactionRequest() {this("CloudPhoto", "2017-07-11", "CreateTransaction", "cloudphoto");this.protocol = ProtocolType.HTTPS;this.url = new URL(this.scheme, this.host, this.port, this.host + this.port + this.queryString);this.additionalProperties = new HashMap<>();this.additionalProperties.addAll(Arrays.asList(this.additionalProperties), new HashMap<>());}
public BatchRefUpdate setRefLogIdent(PersonIdent p) {refLogIdent = p;return this;}
public GetLaunchTemplateResult launchTemplate(GetLaunchTemplateRequest request) {request = beforeClientExecution(request);return executeGetLaunchTemplate(request);}
public ParseInfo(Stemmer stem ) {this.stem = stem;}if ( stem == null) {this.stem = null;} else {if ( stem == null) {this.stem = null;} else {if ( stem == null) {this.stem = null;}} else {if ( stem == null) {this.stem = null;}} else {if ( stem == null) {this.stem = "";}} else {if ( stem == null) {this.stem = "";}}}}
public SimpleQQParser(String[] qqNames, String indexField) {this.qqNames = qqNames;this.indexField = indexField;}
public ReplicationClusterResult promoteReadReplica(ReplicationRequest request) {request = beforeClientExecution(request);} else {request = beforeClientExecution(request);}}}
public DescribeDimensionResult describeDimension() {return describeDimension();}
public String toString() {return "IndexSearch(" + reader + "; executor=" + executor + ")";}
public boolean increment() {return true;}
public final void serialize(LittleEndianOutput out) {out.writeShort(1);out.writeShort(subFrom);out.writeShort(subTo);}
public void decode(byte[] blocks, int blocksOffset, int valuesOffset, int iterations) throws IOException {if (bitsPerValue > 32) {throw new UnsupportedOperationException("Can't decode " + bitsPerValue + "- bits values");}for (int i = 0; i < iterations; ++i) {final long block = readLong(blocks, blocksOffset);blocksOffset += 8;valuesOffset = decode(blocks, valuesOffset);}for (int i = 0; i < iterations; ++i) {final long value = decode(blocks, valuesOffset);}return;}
public boolean isExpectedToken(int token) {ATN atn = getInterpreter().atn;ParserRuleContext ctx = _ctx;ATNState s = atn.states.get(state);IntervalSet following = atn.nextTokens(s);if (following.contains(token)) {return true;}if (!following.contains(token)) {return false;}while (ctx!= null && ctx.invokingState >= 0 && following.contains(token)) {return true;}ctx = ctx.parent;if (following.contains(token)) {return true;}if (nextTokens.contains(token)) {return true;}return false;}if (nextTokens.contains(token)) {return true;}if (nextTokens.contains(token)) {return true;}if (nextTokens.contains(token)) {return true;}if (nextTokens.contains(token)) {return true;}if (nextTokens.contains(token)) {return true;}if (nextTokens.contains(token)) {return true;}if (nextTokens.contains(token)) {return true;}return false;}
public void run() {}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {try {OperandResolver.getSingleValue(arg0, srcRowIndex, srcColumnIndex);return ErrorEval.N;} catch (EvaluationException e) {int result = convertErrorCodeValue(e.getErrorEval().getErrorCode());return new NumberEval(result);}}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{
public final String toString() { return this.toString(); } }
public ListAssignmentsResult listAssignments(ListAssignmentsRequest request) {request = beforeClientExecution(request);return executeListAssignments(request);}
public DeleteAclResult deleteAcl(DeleteAclRequest request) {request = beforeClientExecution(request);return executeDeleteAcl(request);}
public FST.Ref<Long> getFirstArc(FST.Ref<Long> path) {return fst.getFirstArc(path);}
public final void decode(long[] blocks, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long block = blocks[blocksOffset++];for (int shift = 0; shift < iterations; ++i) {values[valuesOffset++] = (long) (block >>> shift) & 255;}}}
public long skip() throws IOException {if (charCount < 0) {throw new IllegalArgumentException("charCount < 0: " + charCount);}int availableFromBuffer = buf.length - pos;if (availableFromBuffer > 0) {pos += availableFromBuffer;return availableFromBuffer;} else {inCancelled = in.skip(charCount);}return inCancelled + availableFromBuffer;}
public final void execute() { return 0 ; }}
public UpdateApiResult updateApi(UpdateApiRequest request) {request = beforeClientExecution(request);return executeUpdateApi(request);}
public ObjectStream openStream() {WindowCursor wc = new WindowCursor(db);InputStream in;try {in = new PackInputStream(pack, objectOffset + headerLength, wc);try {return wc.open(getObjectId(), type).openStream();} catch (IOException e) {return wc.close(getObjectId(), type).closeStream();}in = new BufferedInputStream(new InflaterInputStream(in, wc.getReader()), 8, 8);return new ObjectStream.Filter(type, size, in);}
public ArrayList array() {return (array == null)? null : new ArrayList<>();}
public UpdateDetectorResult updateDetector(UpdateDetectorRequest request) {request = beforeClientExecution(request);return executeUpdateDetector(request);}
public void flush() {flush();}
public RevFlagSet(Collection<RevFlag> s) {this();}
public int size() {return this.size;}
public final long getLong() {if (newPosition > limit) {throw new BufferUnderflowException();}long result = Memory.peekLong(backingArray, offset + position, order);position = newPosition;return result;}
public StringBuilder insert(int offset, long l) {this.append(offset, Long.toString(l), 0, l.length());return this;}
public CharsetFilter(TokenStream in) {super(in);termAtt = new CharsetFilter(in);}
public void p ( ) { }}
public void addIfNoOverlap( WeightedPhraseInfo wpi ) {if (wpi.isOverLimit( wpi ) ) wpi.removeRange( wpi ); return ;}
public Mergeer newMergeer(Repository db) {return new LegacyMergeer(db);}
public static float payloadScore(int docId, String field, int numPayloadsSeen, float payloadScore) {return (numPayloadsSeen > 0? (payloadScore / numPayloadsSeen) : 1;}
public List<ParseTree> evaluate(ParseTree t) {return Collections.findAllRuleNodes(t, ruleIndex);}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[CFRULE]\n");buffer.append("   .condition_type     =").append(field_1_condition_type).append("\n");buffer.append("   .options=0x").append(Integer.format("{0:X}", getOptions()));buffer.append("\n");if (containsFontFormattingBlock) {buffer.append(_fontFormatting.toString()).append("\n");}if (containsBorderFormattingBlock) {buffer.append(_borderFormatting.toString()).append("\n");}if (containsPatternFormattingBlock) {buffer.append(_patternFormatting.toString()).append("\n");}buffer.append("    Formula 1 =").append(Arrays.toString(field_17_formula1.getTokens()));append("\n");buffer.append("    Formula 2 =").append(Arrays.toString(field_17_formula2.getTokens()));append("\n");buffer.append("                             ).append("\n");buffer.append("/CFRULE]\n");return buffer.toString();}
public DescribeServiceResult describeService(DescribeServiceRequest request) {return describeService(request);}
public final String getNameName(int index) {return getNameName(index);}
public DescribeLocationsResult describeLocations() {return describeLocations(new DescribeLocationsRequest());}
public String toString() {return super.toString()+">"+getChild().toString()+">";}
public DirCacheEntry getDirCacheEntry() { return currentSubtree == null? null : new DirCacheEntry();}
public final IntBuffer put(int[] src, int srcOffset, int intCount) {if (srcOffset > 0) {throw new BufferOverflowException();}for (int i = srcOffset; i < srcOffset + intCount; ++i) {put(src, i);}return this;}
public void trimToSize() {int s = size;if (s == 0) {array = EmptyArray.OBJECT;} else {array = new Object[s];System.arraycopy(array, 0, newArray, 0, s);array = newArray;modCount++;}return;}
public DescribeVirtualNetworksResult describeVirtualNetworks(DescribeVirtualNetworksRequest request) {return describeVirtualNetworks(request);}
public void          }
public int[] toArray(int[] a) {rval = new int[a.length];if (a.length == limit) {System.arraycopy(a, 0, a, 0, limit);rval = new int[a.length];} else {rval = new int[a.length];}return rval;}
public BaseSessionCredentials(String accessKeyId, String accessKeySecret, Long roleSessionExpirationSeconds = 0) {if (accessKeyId == null) {throw new IllegalArgumentException("Access key ID cannot be null.");}if (accessKeySecret == null) {throw new IllegalArgumentException("Access key secret cannot be null.");}this.accessKeyId = accessKeyId;this.accessKeySecret = accessKeySecret;this.roleSessionExpirationSeconds = roleSessionExpirationSeconds;}
public final ShortBuffer get(short[] dst, int dstOffset) {if (shortCount > remaining()) {throw new BufferUnderflowException();}Arrays.fill(backingArray, offset, dstOffset, shortCount);position += shortCount;return this;}
public void activate() {if (request == null) {request = new ActivateRequest();}executeActivate(request);}
public DescribeReceiptResult describeReceipt() {return describeReceipt(request);}
public void translate(String text) {if (text == null) {throw new NullPointerException();}translate(text, 0, text.length());}
public DoubleBuffer put(double c) {throw new ReadOnlyBufferException();}
public CreateTrafficPolicyResult createTrafficPolicy(CreateTrafficPolicyRequest request) {request = beforeClientExecution(request);return executeCreateTrafficPolicy(request);}
public JapaneseIteratorMarkCharFilter(Reader input, boolean normalizeKanji, boolean normalizeKanji) {super(input);this.normalizeKanji = normalizeKanji;this.normalizeKanji = normalizeKanji;buffer.reset(input);}
public final void writeLong(long v) {writeInt(v >>> 0);writeInt(v >>> 32);}
public FileResolver () {exports = new TreeMap<>();exportBase = new ArrayList<>();exportBase = new ArrayList<>();}
public ValueEval getRef3DEval(SheetRangeEvaluator sre) {return new LazyRefEval(rptg.getRow(), rptg.getColumn(), sre);}
public DeleteDatasetResult deleteDataset() {return executeDeleteDataset();}
public StartSimulationResult startSimulation(StartSimulationRequest request) {request = beforeClientExecution(request);return executeStartSimulation(request);}
public void describeNodes() {if (verbose) System.out.println("Describe Nodes");else System.out.println("Describe Nodes");}
public static double ppt(double r, int nper, double pv, double fv, int type) {double ppt = -r * (pv * (1 + r, nper) + fv) / (1 + r * type) * (Math.pow(1 + r, nper) - 1);return ppt;}
public DescribeDocumentResult describeDocument(DescribeDocumentRequest request) {request = beforeClientExecution(request);return executeDescribeDocument(request);}
public ListPublishersResult listPublishers() {return new ListPublishersResult();}
public DeleteAccountResult deleteAccount(String accountId) {return deleteAccount(accountId);}
public static int[] grow(int[] array) {return grow(array, 1 + array.length);}
public String outputToString() {if (!(output instanceof ArrayList)) {return outputs.outputToString(new ArrayList<>());} else {StringBuilder b = new StringBuilder();b.append('[');for (int i = 0; i < outputList.size(); i++) {b.append( ", ");}b.append(outputList.get(i));}b.append(']');return b.toString();}
public void notifyDeleteCell(Cell cell) {_bookEvaluator.notifyDeleteCell(cell);}
public StringBuilder replace(int start, int end, String str) {replace0(start, end, str);return this;}
public SetIdentityProviderResult setIdentityProvider(SetIdentityProviderRequest request) {request = beforeClientExecution(request);return executeSetIdentityProvider(request);}
public static double kthSmallest(double[] v, int k) {double r = Double.NaN;k--;if (v!= null && v.length > k && k >= 0) {r = v[k];}return r;}
public void set(int index, long value) {final int o = index >>> 5;final int b = index & 31;final int shift = b << 1;blocks[o] = (blocks[o] & ~(3L << shift)) | (value << shift);}
public String toString() {if (children == null || children.size() == 0)return "<boolean operation='and'/>";StringBuilder sb = new StringBuilder();sb.append("<boolean operation='and'>");for (QueryNode child : children) {sb.append("\n");sb.append(child.toString());}sb.append("\n");return sb.toString();}
public int sumTokens(int fromIx, int toIx) {int result = 0;for (int i = fromIx; i < toIx; i++) {result += tokens[i];}return result;}
public boolean setReadOnly(boolean readonly) {throw new IllegalStateException("cannot modify readonly IntervalSet");}this.readonly = readonly;}
public void clearConsumingCell(FormulaCellCacheEntry cce) {if (!_consumingCells.contains(cce)) {throw new IllegalStateException("Specified formula cell is not consumed by this cell");}}
public List<E> subList(int start, int end) {synchronized (mutex) {return new ArrayList<>(list, start, end);}}
public String toString() {return this.toString();}
public AttachLoadBalancerResult attachLoadBalancer(AttachLoadBalancerRequest request) {request = beforeClientExecution(request);return executeAttachLoadBalancer(request);}
public void run() {  }
public String toString() {return this.toString();}
public ReplaceableAttribute(String name, String value, boolean replace) {_name = name;_value = value;_replace = replace;}
public final void write() { }
public DeleteStackResult deleteStack(Request request) {request = beforeClientExecution(request);return executeDeleteStack(request);}
public GetRepoBuildRuleListRequest() {super("cr", "2016-06-07", "GetRepoBuildRuleList", "cr");setUriPattern("/repos/[RepoNamespace]/[RepoName]/rules");setMethod(MethodType.GET);}
public SrndArray(int initialCapacity) {if (initialCapacity == 0) {mCapacity = 0;} else {mCapacity = ArrayUtil.deepCopyOf(initialCapacity);mKeys = new int[initialCapacity];mValues = new Object[initialCapacity];} else {mCapacity = 0;}return new SrndArray(initialCapacity, 0, initialCapacity);}
public InvokeServiceRequest() {super(userId, 1234-07-12, "InvokeService");super(userId, 1234-15, "InvokeService");super(userId, 1234-15, "InvokeService");super(userId, 1234-15, "InvokeService");super(userId, 1234-15, "Query");super(userId, 1234-17, "Query");super(userId, 1234-17, "Query");super(userId, 1234-17);}
public ListAlbumPhotosRequest() {super("CloudPhoto", "2017-07-11", "ListAlbumPhotos", "cloudphoto", "http://127.0.0.1", "ListPhotoPhotos", "http://127.0.0.1", "ListPhotoPhotos", "http://127.0.0.1", "ListPhotoPhotos", "http://127.0.0.1", "ListPhotoPhotos", "http://127.0.0.1", "http://127.0.1", "ListPhotoPhotos", "http://127.0.0.1", "http://127.0.0.1", "ListPhotoPhotos", "http://127.0.0.1", "ListPhotoPhotos", "http://127.0.0.1", "ListPhotoPhotos", "http://127.0.0.1", "ListPhotoPhotos", "http://127.0.0.1", "http://127.0.0.1", "http://127.0.0.1", "http://127.0.0.2", "http://127.0.1", "http://127.0.0.1", "
public final void               }
public DeleteHsmConfigurationResult deleteHsmConfiguration(DeleteHsmConfigurationRequest request) {request = beforeClientExecution(request);return executeDeleteHsmConfiguration(request);}
public CreateLoadBalancerRequest(String loadBalancerName) {setLoadBalancerName(loadBalancerName);}
public String getContentDisposition() {return contentDisposition;}
public TagResult tag(String tag) {return tag(new TagRequest());}
public String getName() {return this.name;}
public PhraseQuery build() {return new PhraseQuery(field, phraseTerms, slop, maxMultiTermExpansions, segmentOptimizationEnabled);}
public boolean isSubTotal(int rowIndex, int columnIndex) {return false;}
public DescribeDBConnectionsResult describeDBConnections(DescribeDBConnectionsRequest request) {request = beforeClientExecution(request);return executeDescribeDBConnections(request);}
public GetVoiceConnectorResult getVoiceConnector() {return getVoiceConnector(request);}
public void setConfig(Config rc) {setPackedGitOpenFiles(rc.getInt("repo", null, "packedgitopenfiles", getPackedGitOpenFiles());setPackedGitLimit(rc.getLong("repo", null, "packedgitlimit", getPackedGitLimit());setPackedGitWindowSize(rc.getInt("repo", null, "packedgitwindowsize", getPackedGitWindowSize());setPackedGitMMAP(rc.getBoolean("repo", null, "packedgitmmap", getPackedGitMMap()));setDeltaBaseCacheLimit(rc.getLong("repo", null, "dleabcachelimit", getDleBCacheLimit()));long maxMem = System.getRuntime().getMaxMemory();long sctp = rc.getLong("repo", null, "streamfilethreshold", getStreamFileThreshold());sctp = Math.min(sctp, maxMem / 4);sctp = Math.min(sctp, Integer.MAX_VALUE);setStreamFileThreshold(sctp);}
public static Date getJavaDate(double date) {return getJavaDate(date, false);}
public StartPersonResult startPerson(StartPersonRequest request) {this.request = request;return executeStartPerson(request);}
public int size() {return this.size;}
public void run() {}
public DeleteClusterResult deleteCluster() {return deleteCluster(request);}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[MSC]\n");buffer.append("   .deleteMenu  = ").append(Integer.toHexString(getDeleteMenuCount()));buffer.append("\n");return buffer.toString();}
public FileBasedConfig(Config config, File tempDir, FS fs) {super(configFile, fs);this.fs = fs;this.snapshot = FileSnapshot.EMPTY;}
public final int press(int pos) {if (pos < text.getBeginIndex() || pos > text.getEndIndex()) {throw new IllegalArgumentException("offset out of bounds");} else if (pos >= sentenceStarts.length) {text.setIndex(sentenceStarts.length - 1);return DONE;} else { currentSentence = (sentenceStarts.length - 1) / 2; moveToSentenceAt(pos, 0, sentenceStarts.length - 2);text.setIndex(sentenceStarts.length - 1);return currentSentence;} } }
public UpdateParameterValueResult updateParameterValue(UpdateParameterValueRequest request) {request = beforeClientExecution(request);return executeUpdateParameterValue(request);}
public SeriesChartGroupIndexRecord clone() { SeriesChartGroupIndexRecord res = new SeriesChartGroupIndexRecord();res.field_1_chartGroupIndex = field_1_chartGroupIndex;return res;}
public static double calcDistanceFromErrPct(Shape shape, double distErrPct, SpatialContext ctx) {if (distErrPct < 0 || distErrPct > 0.5) {throw new IllegalArgumentException("distErrPct " + distErrPct + " must be range [0 to 0.5]", "distErrPct");}if (distErrPct == 0 || shape instanceof Point) {return 0;}Point bn = shape.getBoundingBox();double y = ((bn.getY() >= 0? bn.getMaxY() : bn.getMinY());double squareDist = ctx.distCalc.distance(bn, bn.getMaxX(), y);return squareDist * distErrPct;}
public void v () {}
public void setPasswordVerifier(int passwordVerifier) {this.passwordVerifier = passwordVerifier;}
public ListCredentialsResult listCredentials() {return new ListCredentialsResult(this);}
public GitMessageFormatter() {dateFormatter = new GitDateFormatter(LocaleUtil.getDefault());}
public GetVideoBoundaryRequest() {super("CloudPhoto", "2017-07-11", "GetVideoBoundary", "http://127.0.0.1", "CloudPhoto", "http://127.0.0.1", "CloudPhoto", "http://127.0.0.1", "CloudPhoto", "http://127.0.0.1", "CloudPhoto", "http://127.0.0.1", "CloudPhoto");}
public int lastIndexOf(Object object) {int pos = size;Link<E> link = voidLink.previous;if (object!= null) {while (link!= voidLink) {pos--;if (link.data == null) {return pos;}link = link.previous;}return -1;}while (link!= voidLink) {pos--;if (link.data == null) {return pos;}link = link.previous;}return -1;}
public DescribeFleetResult describeFleet(DescribeFleetRequest request) {return describeFleet(request);}
public void execute() {if (document == null) {document = new Document();}document = new Document();}document = new Document();}document = new Document();}
public BreakIterator getBreakIterator(int script) {switch (script) {case Japan:return japanBreakIterator.clone();case JapanAsWords:return japanBreakIterator.clone();case JapanSemi:return japanSemi.clone();case JapanSemi:return japanSemi.clone();case JapanSemi:return japanSemi.clone();case JapanSemi:return japanSemi.clone();}return japanSemi.clone();}
public String toString() {StringBuilder b = new StringBuilder();b.append("[DCONREF]\n");b.append("   .firstrow  = ").append(firstRow).append("\n");b.append("   .lastrow  = ").append(lastRow).append("\n");b.append("   .firstcol  = ").append(firstCol).append("\n");b.append("   .lastcol  = ").append(lastCol).append("\n");b.append("   .stFile  = ").append(getCharacterCount()).append("\n");b.append("   .cch  = ").append(charCount()).append("\n");b.append("   .h   = ").append(charType()).append("\n");b.append("   .rrgb  = ").append(getPreferredPath()).append("\n");b.append("/DCONREF]\n");return b.toString();}
public void                }
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[FEATURE HEADER]\n");buffer.append("/FEATURE BODY]\n");return buffer.toString();}
public static byte[] toUnicodeLE(String string1) {return utf8.getBytes(string1);}
public List<String> getFooterLines(String keyName) {return getFooterLines(new HeaderKey(keyName));}
public final void step() {return ;}
public float get(int index) {checkIndex(index);return byteBuffer.getFloat(index);}
public DeleteDetectorResult deleteDetector(DeleteDetectorRequest request) {request = beforeClientExecution(request);return executeDeleteDetector(request);}
public final int[] grow() {assert bytesStart!= null;return bytesStart;}
public ListExamplesResult listExamples(ListExamplesRequest request) {request = beforeClientExecution(request);return executeListExamples(request);}
public void        }
public RestoreClusterResult restoreCluster(RestoreClusterRequest request) {return executeRestoreCluster(request);}
public final void publish() {out.writeShort(field_1_categoryDataType);out.writeShort(field_2_valuesDataType);out.writeShort(field_4_numBands);for (int i = 0; i < field_6_numBands; i++) {out.writeShort(field_6_numBands);for (int j = 0; j < field_6_numBands; i++) {out.writeShort(field_6_numBands[i]);}}}
public PostAgentResult postAgent(PostAgentRequest request) {request = beforeClientExecution(request);return executePostAgent(request);}
public ParseTreePattern compileParseTreePattern(String pattern, int patternRuleIndex) {if (getInputStream()!= null) {TokenStream tokenSource = getInputStream().getTokenSource();if (tokenSource instanceof Lexer) {Lexer lexer = (Lexer)tokenSource;return compileParseTreePattern(pattern, patternRuleIndex, lexer);}}throw new UnsupportedException("Parser can't recognize a lexer to use");}
public ReplicationGroup backup() {return new ReplicationGroup(this);}
public String getName() {return this.name;}
public final void copyTo(byte[] b, int o ) {formatHexByte(b, o + 0, w1 );formatHexByte(b, o + 16, w4 );}
public final int size() { map = new intList(end - ptr ) ;map.add(ptr);map.add(end);return map;}
public Collection<ObjectId> getAdditionalHits() {return Collections.emptySet();}
public long ramBytesUsed() {return TERMS_BASE_RAM_BYTES_USED + (fst!=null? fst.ramBytesUsed() : 0)+ RamUsageEstimator.sizeOf(scratch.bytes()) + RamUsageEstimator.sizeOf(scratchUTF16.chars());}
public String toXml(String tab) {StringBuilder builder = new StringBuilder();builder.append(tab).append("<").append(getRecordName()).append("\n");for (EscherRecord escherRecord : escherRecords) {builder.append(escherRecord).append("\n");}builder.append(tab).append("<").append(getRecordName()).append("\n");return builder.toString();}
public TokenStream create(TokenStream input) {return new GreeterMinimalStemFilter(input);}
public String toString() {final StringBuilder r = new StringBuilder();r.append("commit ");r.append(treeId!= null? treeId.name() : "NOT_SET");r.append("\n");for (ObjectId p : parentIds) {r.append(p.name());r.append("\n");if (encoding!= null && encoding!= Constants.CHARSET)r.append("encoding ");r.append(encoding.name());r.append("\n");}r.append("}");
public void             }
public CreateOptionResult createOption(CreateOptionRequest request) {request = beforeClientExecution(request);return executeCreateOption(request);}
public AssociateMemberResult associateMember(AssociateMemberRequest request) {request = beforeClientExecution(request);return executeAssociateMember(request);}
public void run() {this.refreshProgress = new RefCountQuery(this.mId, this.mProgress, this.mFromUser, true);}this.refreshProgress = new RefCountQuery(this.mProgress, this.mFromUser, true);this.refreshProgress = new RefCountQuery(this.mId, this.mProgress, this.mFromUser, true);this.refreshProgress = new RefCountQuery(this.mProgress, this.mFromUser, true);}
public SetTerminationResult setTermination(SetTerminationRequest request) {request = beforeClientExecution(request);return executeSetTermination(request);}
public String getErrorHeader(RecognitionException e) {final int line = e.getOffendingToken().getLine();final int charPositionInLine = e.getOffendingToken().getCharPositionInLine();return "line " + line + ":" + charPositionInLine + ";}";}
public final CharBuffer asReadOnlyBuffer() {CharBuffer buf = new CharBufferAdapter(byteBuffer.asReadOnlyBuffer());buf.limit = limit;buf.position = position;buf.byteBuffer.order = byteBuffer.order;return buf;}
public void step1() {executionResult = executeStep1() {executionResult = executeStep1() {executionResult = executeStep1() {executionResult = executeStep1();}executionResult = executeStep1() {executionResult = executeStep1();}executionResult = executeStep1() {executionResult = executeStep1();}executionResult = executeStep1();}executionResult.execute();}
public ObjectIdSubClass<ObjectId> getNewObjectIds() {return new ObjectIdSubClass<>() {@Override public ObjectIdSubClass<ObjectId> getNewObjectIds() {if (newObjectIds!= null) {return new ObjectIdSubClass<>(newObjectIds);}}}
public void clear() {hash = new byte[0];super.clear();}
public void reset() throws IOException {if (mark == -1) {throw new IOException("Invalid mark");}pos = mark;}
public RefErrorPtg(LittleEndianInput in) {field_1_reserved = in.readInt();}                                                                          ; if ( in.length() == 0) {return 0;} }
public void resume() {request = beforeClientExecution(request);executeResume(request);}
public final ValueEval evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex) {if (args.length!= 3) {return ErrorEval.VALUE_INVALID;}return evaluate(srcRowIndex, srcColumnIndex, args[0], args[1], args[2]);}
public GetRepoRequest() {super("cr", "2016-06-07", "GetRepo", "cr");setUriPattern("/repos/[RepoNamespace]/[RepoName]");setMethod(MethodType.GET);}
public void setDate(Date date) {if (date.hasValue()) {setDate(date.getTime(), LocaleUtil.getLocale());} else {this.date = null;}}
public void          }
public Object[] toArray() {return (Object[]) a.clone();}
public void write(char[] buffer, int offset, int len) {checkOffsetAndCount(buffer.length, offset, len);synchronized (lock) {Arrays.checkGrow(len, buffer.length, offset, len);Arrays.fill(buffer, offset, len);}
public final void run() {while (true) {if (queue.size() == 0) {break;} else {queue.remove();}}}
public DeleteSecurityGroupRequest(String groupName, String roleName) {if (groupId == null) {throw new IllegalArgumentException("Null AWS account name must not be null");} else if (groupId.equals(null)) {throw new IllegalArgumentException("The account name must not be null");} else if (groupId.equals(null)) {throw new IllegalArgumentException("The account name must not be null");} else if (groupId.equals(null)) {throw new IllegalArgumentException("The account name must not be null");} else if (groupId.equals(null));} else if (groupId.equals(null)) {throw new IllegalArgumentException("Null AWS account name must not be null");} else if (groupId.equals(null)) {throw new IllegalArgumentException("The account name must not be null");} else if (groupId.equals(null));
public void deregisterMultipleElements() {request = new DeregisterMultipleElementsRequest();} else {request = new DeregisterMultipleElementsRequest();} else {if (request == null) {request = new DeregisterMultipleElementsRequest();} else {request = new DeregisterMultipleElementsRequest();}}}
public void execute() {if (progressMonitor == null) {progressMonitor.end();} else {progressMonitor.end();}}
public CreateAlgorithmResult createAlgorithm(CreateAlgorithmRequest request) {request = beforeClientExecution(request);return executeCreateAlgorithm(request);}
public final int readUInt() {checkPosition(1);return _buf._readIndex++ & 0xFF;}
public void setLength(int sz) {pm.encodeInt(info, infoOffset + Size, sz);}
public void describe() { return void ()                                                               }
public ListResourcesResult listResources(ListResourcesRequest request) {request = beforeClientExecution(request);return executeListResources(request);}
public void parseInline(Parser recognizer) {ParseException e = new ParseException(recognition);for (ParserContext context = recognizer.getContext(); context!= null ) {context.exception = e;}throw new ParseException(e);}
public SetTagsResult setTags(SetTagsRequest request) {request = beforeClientExecution(request);return executeSetTags(request);}
public ModifyStrategyRequest() {super("aegis", "2016-12-11", "ModifyStrategy", "vcpaegis");setMethod(MethodType.POST);}
public DescribeVirtualMachineResult describeVirtualMachine(DescribeVirtualMachineRequest request) {return describeVirtualMachine(request);}
public void execute() {if (progressMonitor == null) {progressMonitor.end();} else {progressMonitor.end();}
public final void write () { }
public SheetRangeIdentifier(String sheetName, NameIdentifier firstSheetIdentifier, NameIdentifier lastSheetIdentifier) {super(sheetName, firstSheetIdentifier);_lastSheetIdentifier = lastSheetIdentifier;}
public BlendedTermQuery() {return new BlendedTermQuery(ArrayUtil.copyOfSubArray(terms, 0, numTerms),ArrayUtil.copyOfSubArray(boosts, 0, numTerms),rewriteMethod);}
public ParseException(Token currentToken,int[][] expectedTokenSequences,String[] tokenImage) {super(initialise(currentToken, expectedTokenSequences, tokenImage));this.currentToken = currentToken;this.expectedTokenImages = expectedTokenImages;}
public FetchPhotosRequest() {this("CloudPhoto", "2017-07-11", "FetchPhotos", "cloudphoto");this.fetchPhotos = new FetchPhotosRequest();this.fetchPhotosRequest = new FetchPhotosRequest();this.fetchPhotosRequest = new FetchPhotosRequest();this.fetchPhotosRequest = new FetchPhotosRequest();this.fetchPhotosRequest.setProtocol(ProtocolType.HTTPS);this.fetchPhotosRequest.getPhotos());}
public PrintWriter getWriter() {return new OutputStreamWriter(this, StandardCharsets.UTF_8);}
public void translate(Map<String,String> args) {super(args);minGramSize = getInt(args, "minGramSize", Integer.MAX_Gram_SIZE);if (args.size() > 0) {throw new IllegalArgumentException("Unknown parameters: " + args);} } } } }
public void call() {}
public IStemFilter(TokenStream input, boolean stemDerivative) {this.stemDerivative = stemDerivative;wordAtt = addAttribute(CharTermAttribute.class);}= addAttribute(CharTermAttribute.class);}
public CreateTrafficPolicyResult createTrafficPolicy(CreateTrafficPolicyRequest request) {request = beforeClientExecution(request);return executeCreateTrafficPolicy(request);}
public void serialize(LittleEndianOutput out) {out.writeInt(fSS);out.writeShort(securityDescriptor);}
public static double floor(double n, double s) {double f;if ((n > 0 && s > 0) || (s == 0 && n!= 0)) {f = Double.NaN;} else {f = (n == 0 || s == 0)? 0 : Math.floor(n / s) * s;}return f;}
public ByteArrayOutputStream (byte[] bytes, int offset, int len) {checkPosition(bytes, offset, len);return new ByteArrayOutputStream(bytes, offset, len);}
public static ArrayList<Tree> getChildren(Tree t) {for (int i = 0; i < tree.getChildCount(); i++) {tree.getChild(i);}return tree;}
public void clear() {                                                                                             
public void refreshAll() {                                 }
public DeleteQueryResult deleteQuery() {return deleteQuery(new DeleteQueryRequest());}
public SimilarityFormatter(ConnectScores outputs) {this.costs = outputs;this.bestPathMap = new HashMap<>();sb.append(FormatHeader());sb.append(Color.valueOf(colors));for (int i = 0; i < colors.length; i++) {if (colors[i] == null) {colors[i] = null;}}}
public CheckMultiwordRequest() {super("azai-poc", "202-05-07", "CheckMultiword");super("azai-poc", "202-05-07", "CheckMultiword");super("azai-poc", "202-05-07", "CheckMultiword");super("azai-poc", "202-05-07", "CheckMultiword");super("azai-poc", "202-05-07", "CheckMultiword");} else {super("azai-poc", "202-06-07", "CheckMultiword");}}
public ListUsersResult listUsers(ListUsersRequest request) {request = beforeClientExecution(request);return executeListUsers(request);}
public CreateDatabaseResult createDatabase() {return createDatabase(request);}
public StartTaskResult startTask(StartTaskRequest request) {request = beforeClientExecution(request);return executeStartTask(request);}
public String metric() {return this.metric;}
public FuzzyTag(RecordInputStream in) {data = in.readTrim();}                                                                                                                                                                                                                             
public Change(ChangeAction action, ResourceRecordSet resourceRecordSet) {_action = action;_resourceRecordSet = resourceRecordSet;}
public DeleteImageResult deleteImage(DeleteImageRequest request) {request = beforeClientExecution(request);return executeDeleteImage(request);}
public CreateConfigurationSetResult createConfigurationSet(CreateConfigurationSetRequest request) {request = beforeClientExecution(request);return executeCreateConfigurationSet(request);}
public Iterator<E> iterator() {Object[] snapshot = elements;return new Iterator<E>(snapshot, 0, snapshot.length);}
public void visitContainedRecords(RecordVisitor rv) {if (_recs.size() == 0) {return;}rv.visitRecord(_bofRecord);for (int i = 0; i < _recs.size(); i++) {Result r = _recs.get(i);if (r instanceof RecordAggregate) {r.visitRecord(r);}else {r.visitRecord(r);}rv.visitRecord(EOFRecord.instance);}}
public String toString() {return new String() {@Override public String toString() {@Override public String toString() {return new String() {@Override public String toString() {return this.toString();}};}
public static BTBlock createEmptyBTBlock(final BTBlock.Size bigBlockSize, boolean isXB) {final BTBlock block = new BTBlock(bigBlockSize);if (isXB) {block.setXBBlock(bigBlockSize, SizeOf.END_OF_CHAIN);}return block;}
public void tag(String tag) {request = beforeClientExecution(tag);}
public DeleteMessageResult deleteMessage(DeleteMessageRequest request) {request = beforeClientExecution(request);return executeDeleteMessage(request);}
public ListOutputsResult listOutputs(ListOutputsRequest request) {request = beforeClientExecution(request);return executeListOutputs(request);}
public ResumeProcessesResult resumeProcesses(ResumeProcessesRequest request) {request = beforeClientExecution(request);return executeResumeProcesses(request);}
public GetPersonResult getPerson(GetPersonRequest request) {return executeGetPerson(request);}
public final String toFormulaString(String[] operands) {if (space.isSet(field_1_options)) {return operands[0];} else if (optiIf.isSet(field_1_options)) {return operands[0];} else if (optiSkip.isSet(field_1_options)) {return operands[0];} else {return toFormulaString( operands[0] + ")");}}}
public void merge(T first, T second) {throw new UnsupportedOperationException();}
public String toString() {return this.message.getKey() + ": " + getLocalizedMessage();}
public void parse(Parser parser, String path) {this.path = path;elements = new ArrayList<>();}
public CreateAccountResult() {this(false);}
public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {for (int j = 0; j < iterations; ++j) {final byte block = blocks[blocksOffset++];values[valuesOffset++] = (block >>> 7) & 1;values[valuesOffset++] = (block >>> 5) & 1;values[valuesOffset++] = (block >>> 4) & 1;values[valuesOffset++] = (block >>> 3) & 1;values[valuesOffset++] = (block >>> 2) & 1;values[valuesOffset++] = (block >>> 1) & 1;values[valuesOffset++] = (block >>> 1) & 1;values[valuesOffset++] = (block >>> 2) & 1;values[valuesOffset++] = (block >>> 1) & 1;}
public PushConnection openPush() throws GitAPIException {throw new GitAPIException(JGitText.get().pushIsNotSupportedForBundleTransports);}
public static void strcp(char[] dst, int di, char[] src, int si) {while (src[di]!= 0) {dst[di++] = src[di++];}dst[di++] = 0;}dst[di++] = 0;}ptr[di++] = 0;}ptr[di++] = 0;}ptr[di++] = 0;}ptr[di++] = 0;}ptr[di++] = 0;}
public final void  move() { return ; }
public static int numNotnull(Object[] data) {int n = 0;if (data == null) {n++;return n;}for (Object o : data) {if (o!= null) {n++;}return n;}
public void add(int location, E object) {if (location >= 0 && location <= size) {Link<E> link = voidLink;if (location < (size / 2)) {for (int i = 0; i <= location; i++) {link = link.next;}} else {for (int i = size; i > location; i++) {link = link.previous;}}Link<E> previous = link.previous;link.previous = newLink;size++addCount++;} else {throw new IndexOutOfBoundsException();}}
public DescribeDomainResult describeDomain() {return describeDomain(new DescribeDomainRequest());}
public void flush() {flush();}
public EnglishCharFilterFactory(Map<String,String> args) {super(args);if (args.size() > 0) {throw new IllegalArgumentException("Unknown parameters: " + args);}}}
public final void x () { return ;}
public static void allocate(int size) {if (size == 0) {throw new IllegalStateException();}while (size == 0) {if (size == 0) {throw new IllegalStateException();}if (size == 0) {throw new IllegalStateException();}if (size == 0) {throw new IllegalStateException();}if (size == 0) {throw new IllegalStateException();}if (size == 0) {throw new IllegalStateException();}if (size == 0) {throw new IllegalStateException();} else {}}}
public new Diff.Edit (endA, endA, endB);return new Diff.Edit(endA, endB, endB);}
public UpdateRuleResult updateRule() {return executeUpdateRule(new UpdateRuleRequest());}
public ListCommunicationsResult listCommunications(ListCommunicationsRequest request) {request = beforeClientExecution(request);return executeListCommunications(request);}
public GetDeploymentResult getDeployment(GetDeploymentRequest request) {request = beforeClientExecution(request);return executeGetDeployment(request);}
public void setNoChildReport() {boolean result = false;for (Task task : tasks) {if (task instanceof NoChildReport) {result = true;break;}if (result == null) {result = false;break;}if (result.getCount() == 0) {result = false;break;}if (result.getCount() == 1) {result = true;break;}if (result.getCount() == 0) {result = 1;}}return result;}
public E get(int location) {try {return a[location];} catch (IndexOutOfBoundsException e) {throw new IndexOutOfBoundsException(e);}}
public DescribeDatasetResult describeDataset(DescribeDatasetRequest request) {request = beforeClientExecution(request);return executeDescribeDataset(request);}
public void           
public DescribeNetworkInterfacesResult describeNetworkInterfaces() {return describeNetworkInterfaces(new DescribeNetworkInterfacesRequest());}
public boolean contains(int row, int col) {return _firstRow <= row && _lastRow >= col && _lastColumn >= col;}
public String toString() {return this.toString();}
public String getContentDisposition() {return contentDisposition;}
public Iterator<K> iterator() {return iterator();}
public CreateScriptResult createScript(CreateScriptRequest request) {request = beforeClientExecution(request);return executeCreateScript(request);}
public BytesRef bytesRef(int termUpto) {if (termUpto >= info.terms.size()) {return null;} else {info.terms.get(termUpto, buf);return buf;}}
public void run() {output.writeVLong(0);}
public AssociateAccountResult associateAccount(AssociateAccountRequest request) {request = beforeClientExecution(request);return executeAssociateAccount(request);}
public final void pop(RevCommit c) {Block b = head;if (b == null) {b = free.newBlock();b.resetToEnd();b.add(c);head = b;tail = b;return;}if (b.canPop() ) {b.remove(c);return;}b = free.newBlock();b.resetToEnd();b.tail = b;return;}if (b.canPop() ) {b.remove(c);return;}b.next = b;tail = b;return;}
public void constructor(String args) {super(args);minGapSize = getInt(args, "minGapSize", Integer.MAX_WIDTH);shape = getInt(args, "shape", Integer.MAX_WIDTH);}
public ModifyDBParameterGroupRequest(String dBParameterName, java.util.List<Parameter> parameters) {setDBParameterGroupName(dBParameterName);setParameters(parameters);}
public GetHostedZoneResult getHostedZone() {return getHostedZone(request);}
public void set(int index, long value) {final int o = index >>> 6;final int b = index & 63;final int shift = b << 1;blocks[o] = (blocks[o] & ~(1L << shift)) | (value << shift);}
public final RevFilter clone() {return new RevFilter(pattern);}
public String toString() {return "spans(" + term.toString() + ")";}
public boolean canAppendMatch() {for (int i = 0; i < hits.size(); i++) {if (hits[i]!= LastHeader.INSTANCE) {return true;}}return false;}
public int lastIndexOf(String subString, int start) {synchronized (this) {return super.lastIndexOf(subString, start);}}
public DeleteNetworkResult deleteNetwork(DeleteNetworkRequest request) {request = beforeClientExecution(request);return executeDeleteNetwork(request);}
public AssociateMemberResult associateMember(AssociateMemberRequest request) {request = beforeClientExecution(request);return executeAssociateMember(request);}
public static int processor(byte[] b, int ptr) {if (ptr == 0)ptr += 40;if (ptr < ssize && b[ptr] == 'p')ptr = nextLF(b, ptr);return match(b, ptr, ObjectChecker.operator);}
public int getRowCount() {return countMap.get(rowKey);}
public SubmoduleUpdateCommand addPath(String path) {paths.add(path);return this;}
public GetPushTemplateResult getPushTemplate() {return getPushTemplate(request);}
public DescribeInventoryResult describeInventory(DescribeInventoryRequest request) {request = beforeClientExecution(request);return executeDescribeInventory(request);}
public DescribeVpcConnectionsResult describeVpcConnections() {return describeVpcConnections();}                                                                                  }
public final long putLong(long index, long value) {throw new IllegalStateException();}
public void run() {}
public final void tend() {end();}
public DeleteAppResult deleteApp(Request request) {request = beforeClientExecution(request);return executeDeleteAppResult(request);}
public void run() {}
public final void run() {return ;}
public static boolean isValidSchemeChar(int index, char c) {if (c >= 'a' && c <= 'z')return true;if (index > 0 && (c >= '0' && c <= '9')return true;if (c >= 'a' && c <= 'z')return true;if (c >= '0' && c <= '9')return false;if (c >= 'a' && c <= 'z')return true;return false;}
public ListAppliedInstancesResult listAppliedInstances(ListAppliedInstancesRequest request) {request = beforeClientExecution(request);return executeListAppliedInstances(request);}
public final void                                                                                               
public ValueEval evaluate(ValueEval[] args, OperationEvaluationContext ec) {if (args.length < 1)return ErrorEval.VALUE_INVALID;final boolean isA1style;final String text;try {ValueEval ve = OperandResolver.getSingleValue(args[0], ec.getRowIndex(), ec.getColumnIndex());text = OperandResolver.coerceValueToString(args[1], ec);break;case 2:isA1style = evaluateBooleanArg(args[1], ec);break;default:return ErrorEval.VALUE_INVALID;} catch (EvaluationException e) {return e.getErrorEval();}return evaluateRaw(ec, text, isA1style);}
public final int compareTo(int[] bs, int p) {int cmp;cmp = Utils.compareUnsigned(w1, bs[p]);if (cmp!= 0) {return cmp;}cmp = Utils.compareUnsigned(w2, bs[p + 1]);if (cmp!= 0) {return cmp;}cmp = Utils.compareUnsigned(w3, bs[p + 2]);if (cmp!= 0) {return cmp;}return Math.compareUnsigned(w4, bs[p + 3]);}return Math.compareUnsigned(w5, bs[p + 4]);}
public final void removeName(int index) {names.remove(index);} else { return ; }}
public GetQueueAttributesRequest(String queueUrl, java.util.List<String> attributeNames) {this.queueUrl = queueUrl;this.attributeNames = new ArrayList<>();}
public final void x ()  {}
public static boolean setEnabled(boolean enabled) {return enabled;}
public DeleteLogEntryResult deleteLogEntry(DeleteLogEntryRequest request) {request = beforeClientExecution(request);return executeDeleteLogEntry(request);}
public boolean contains(char[] text, int offset, int length) {return map.containsKey(text, offset, length);}
public int getFirstSheetIndexFromExternSheetIndex(int externalSheetNumber) {return linkTable.getFirstSheetIndexForExternSheetIndex(externalSheetNumber);}
public boolean accepts(String command) {return command.length() + 1 < command.length() && command.startsWith(command);}
public static void register(MergeStrategy cmp) {if (cmp.name == null) {return;}if (cmp.end == null) {return;}if (cmp.end == null) {return;}if (cmp.end!= null) {return;}if (cmp.end!= null) {return;}if (cmp.end!= null) {return;}if (cmp.end!= null) {return;}if (cmp.end == null) {return;}}
public long ramBytesUsed() {return (index!=null)? index.ramBytesUsed() : 0;}
public HostedZone(String id, String name, String callerReference) {_id = id;_name = name;_callerReference = callerReference;}
public GetFindingsResult getFindings() {return getResults(new GetFindingsRequest());}
public DescribeTopicsResult describeTopics(DescribeTopicsRequest request) {request = beforeClientExecution(request);return executeDescribeTopics(request);}
public boolean checkMatch(ValueEval eval) {if (eval instanceof NumberValueEval) {minimumValue = eval;} else { double currentValue = ((NumberValueEval) eval).getNumberValue();if (currentValue < minValue) {minimumValue = eval;}return true;}
public void write(LittleEndianOutput out) {out.writeByte(sid + getPtgClass());out.writeShort(field_1_len_subtract);}
public static int main(String[] args) throws Exception {boolean printTree = false;String path = null;for (int i = 0; i < args.length; i++) {if (args[i].equals("-printTree")) {printTree = true;} else {path = args[i];}}if (args.length!= (printTree? 2 : 1)) {throw new IllegalArgumentException();}try (Directory dir = FSDirectory.open(path)) {PrintStats(r, System.out, printTree);}}return 0;}
public final void  setValue()   = 1; }
public final void  run() {break;}
public final void run() {                        }
public AttributeDefinition(String attributeName, NumericClassAttribute attributeType) {if (attributeName == null) {attributeName = null;attributeType = null;} else {if (attributeType == null) {attributeType = null;} else {if (attributeType.equals(null)) {removeAttribute(attributeName);}} else {if (attributeType.equals(null)) {removeAttribute(attributeName);}} else {addAttribute(attributeType, "");}}
public static String join(Collection<String> parts, String separator) {return StringUtils.join(parts, separator);}
public ListTaskDefinitionResult listTaskDefinition(ListTaskDefinitionRequest request) {request = beforeClientExecution(request);return executeListTaskDefinition(request);}
public ListComponentsResult listComponents() {return new ArrayList<>();}
public ConnectPhotosRequest() {this("CloudPhoto", "2017-07-11", "ActivatePhotos", "cloudphoto");}"2017-07-11", "ActivatePhotos", "cloudphoto");}
public CreateMatchmakingRuleResult createMatchmakingRule(CreateMatchmakingRuleRequest request) {request = beforeClientExecution(request);return executeCreateMatchmakingRule(request);}
public ListAvailableManagementCandidatesResult listAvailableManagementCandidates(ListAvailableManagementCandidatesRequest request) {request = beforeClientExecution(request);} else {request = beforeClientExecution(request);}}
public ObjectIdSubClass<ObjectId> getBaseObjectIdSubClass() {return (ObjectIdSubClass) super.getBaseObjectIdSubClass().get();}
public DeletePushTemplateResult deletePushTemplate(DeletePushTemplateRequest request) {request = beforeClientExecution(request);return executeDeletePushTemplate(request);}
public CreateDomainResult createDomain(CreateDomainRequest request) {request = beforeClientExecution(request);return executeCreateDomain(request);}
public static int getEncodedSize(int values) {int result = values.length * 1;for (int i = 0; i < values.length; i++) {result += getEncodedSize(values.get(i));}return result;}
public void               }
public final int getInt(int index) {checkIndex(index, SizeOf.INT);return backingArray.get(offset + index);}
public List<Head> getNextHeads(char c) {if ( matches(c)) {return new Heads;} else {return new Heads;}}
public final ShortBuffer putShort(Short value) {throw new ReadOnlyBufferException();}
public void writeUnshared(Object o) throws IOException {if (o == this) {throw new IllegalStateException();}synchronized (o) {if (o == this) {throw new IllegalStateException();}if (o == this) {throw new IllegalStateException();}if (o == this) {throw new IllegalStateException();}if (o == this) {throw new IllegalStateException();}if (o == this) {throw new IllegalStateException();}if (o == this) {throw new IllegalStateException();}
public int offsetByCodePoints(int index, int charOffset) {return sbp.charArray.offsetByCodePoints(value, 0, count, charOffset);}
public static int getSingleAlt(BitSet alts) {for (int i = 0; i < alts.size(); i++) { if (alts.size() == 1) {return alts.get(i);}return ATN.INVALID_ALT;}
public Date getTime() {return new Date(this.getTime());}
public RuleTagToken(String ruleName, int excludeTokenType, String label) {if (label == null) {throw new IllegalArgumentException("label must not be null or empty.");}this.ruleName = ruleName;this.excludeTokenType = excludeTokenType;}
public void disableAccount() {request = beforeClientExecution(request);}
public CreateRoomResult createRoom() {return new CreateRoomResult();}
public DeleteReplicationGroupResult deleteReplicationGroup(DeleteReplicationGroupRequest request) {request = beforeClientExecution(request);return executeDeleteReplicationGroup(request);}
public final void decode(CharBuffer buffer) {try {newDecoder().onMalformedInput(buffer);} catch (CharacterCodingException e) {throw new ParseException(e.getMessage(), e);}}}
public Deployment(String id, String status, String domainName) {this(id, status, null);this.serviceName = id;this.status = null;this.domainName = null;}
public String displayName() {return this.displayName;}
public DateWindow1901Record(RecordInputStream in) {field_1_window = in.readShort();}
public void             }
public ParserExtension getExtension(String key) {if (key == null ||!this.extensions.containsKey(key)) {return null;}return extensions.get(key);}
public void load(ResourceLoader loader) throws IOException {try {if (candidateModelFile!= null) {OpenLPOpsFactory.getClassifierModel(candidateModelFile, loader);} catch (IllegalArgumentException e) {throw new IllegalArgumentException(e);}}
public DescribeVaultResult describeVault(DescribeVaultRequest request) {request = beforeClientExecution(request);return executeDescribeVault(request);}
public int[] getCharIntervals() {return _points.clone();}
public long ramBytesUsed() {return RamUsageEstimator.alignObjectSize(3 * RamUsageEstimator.NUM_BYTES_OBJECT_REF+ 2 * RamUsageEstimator.NUM_BYTES_OBJECT_BYTES+ bytesUsed);}
public void execute () { } }
public DescribeClusterUserCredentialRequest() {super("SC", "2016-06-07", "DescribeClusterUserCredential", "cs");setUriPattern("/keeper/[ClusterId]/user_config");setMethod(MethodType.GET);}
public PrecisionRecord(RecordInputStream in) {_precision = in.readShort();}
public void serialize(LittleEndianOutput out) {out.writeShort(getLeftColGranularity());out.writeShort(getColLevelMax());}
public DeleteVirtualInterfaceResult deleteVirtualInterface(DeleteVirtualInterfaceRequest request) {request = beforeClientExecution(request);return executeDeleteVirtualInterface(request);}
public void __exit() {}
public final void step() {}}
public DeleteContactInfoResult deleteContactInfo(DeleteContactInfoRequest request) {request = beforeClientExecution(request);return executeDeleteContactInfo(request);}
public StringBuilder append(char c) {write(c);return this;}
public static long ordinalFromSegmentsFileName(String fileName) {if (fileName.equals(IndexFileNames.SEGMENTS)) {return 0;} else if (fileName.startsWith(IndexFileNames.SEGMENTS)) {return Integer.parseInt(fileName.substring(1 + IndexFileNames.SEGMENTS.length), Character.MAX_RADIX);} else {throw new IllegalArgumentException("fileName \"" + fileName + "\" is not a segments file");} }
public final void fromOption(String o) {if (o == null || o.length() == 0 ) return NO_TAG_OPTION ;else if (o == null || o.length() == 0 ) return NO_TAG_OPTION ;else if (o == null ) return NO_TAG_VALUE ;elseresult = false; elseresult = true; elseresult = false; elseresult = true; elseresult = false;
public StartContentResult startContent(StartContentRequest request) {request = beforeClientExecution(request);return executeStartContent(request);}
public static String escapeReplacement(String s) {StringBuilder result = new StringBuilder(s.length());for (int i = 0; i < s.length(); i++) {char c = s.charAt(i);if (c == '\\') {result.append('\\');}result.append(c);}return result.toString();}
public final void set() { return ; }
public QueryParserTokenManager(CharStream stream) {initBlock();input_stream = stream;}
public long valueFor(double elapsed) {double val;if (multiplier == 0)val = 0;elseval = (long) Math.round(elapsed / multiplier);if (type == '0')return Double.longBitsToDouble(elapsed);elseset = Double.longBitsToDouble(elapsed);elseset = Double.longBitsToDouble(elapsed);elseset = Double.longBitsToDouble(elapsed);elseset = Double.longBitsToDouble(elapsed);} else if (type == '0')return Double.longBitsToDouble(elapsed);elseset = Double.longBitsToDouble(elapsed);elsereset = Double.longBitsToDouble(elapsed);elsereset = Double.longBitsToDouble(elapsed);elsereset = Double.longBitsToDouble(elapsed);elsereset = Double.longBitsToDouble(elapsed);elsereset = Double.longBitsToDouble(elapsed);}
public final LongBuffer get(long[] dst, int srcOffset, int longCount) {byteBuffer.limit(limit * SizeOf.LONG);byteBuffer.position(position * SizeOf.LONG);if (byteBuffer instanceof ByteBuffer) {((ByteBuffer) byteBuffer).get(dst, dstOffset, longCount);}this.position += longCount;return this;}
public void removeErrorListeners() {if ( errors!= null) {errors.removeListener(NullErrorListener.class);} else {errors.addListener(NullErrorListener.class);}return;}
public CommonTokenStream(TokenSource tokenSource, int channel) {this(tokenSource, 0);0);0);1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;1;0;0;1;0;0;0;1);}
public ListObjectPermissionsResult listObjectPermissions(ListObjectPermissionsRequest request) {request = beforeClientExecution(request);return executeListObjectPermissions(request);}
public ObjectToPack(AnyObjectId src, int type) {super(src);flags = type << TYPE_SHIFT;}
public int stem(char s[], int len) {int numVoices_Renamed = numVoices(s, len);for (int i = 0; i < alternatives.length; i++) {Variant afi = alternatives[i];if (numVoices_Renamed > afi.getV() && len >= afi.getVariant().length() + 3 && stemmerUtil.endsWith(s, len, afi.getVariant)) {len -= afi.getVariant().length;return len;}}return len;}
public void recover(Parser recognizer, RecognitionException e) {if (lastErrorIndex == ((TokenStream) recognizer.getInputStream()).getIndex() && lastErrorStates!= null) {lastErrorStates = new IntervalSet();}lastErrorStates.add(recognizer.getState());consumeFrom(recognizer, followSet);}
public String toFormulaString() {String value = field_3_string;int len = value.length();StringBuilder sb = new StringBuilder(len + 4);for (int i = 0; i < len; i++) {char c = value.charAt(i);if (c == FORMULA_DELIM) {sb.append(FORMULA_DELIM);}sb.append(c);}sb.append(FORMULA_DELIM);return sb.toString();}
public UnlinkFaceRequest() {super("LinkFace", "2018-07-20", "UnlinkFace");super("LinkFace", "2018-07-20", "UnlinkFace");super("LinkFace", "2018-07-20", "UnlinkFace");super("LinkFace", "2018-07-20", "UnlinkFace");super("LinkFace", "2018-07-20", "UnlinkFace");super("LinkFace", "2017-08-10", "UnlinkFace");super("LinkFace", "2018-07-20", "UnlinkFace");super("LinkFace", "2018-07-20", "UnlinkFace");super("LinkFace", "2018-07-20", "UnlinkFace");super("LinkFace", "2018-07-20", "UnlinkFace");super("LinkFace", "2018-07-20", "UnlinkFace");}
public ConfigurationOptionSetting(String awsNamespace, String optionName, String value) {if (awsNamespace == null) {awsNamespace = null;} else if (awsNamespace.equals("") == false) {awsNamespace = null;} else if (awsNamespace.equals("") == false) {awsNamespace = "";} else if (awsNamespace.equals("") == false) {awsNamespace = "";} else if (awsNamespace.equals("") == false) {awsNamespace = "";} else {awsNamespace = null;}if (awsNamespace!= null) {awsNamespace = awsNamespace.equals(null);} else if (awsNamespace.equals("") == false) {awsNamespace = null;} else if (awsNamespace.equals("") == false) {awsNamespace = "";} else if (awsNamespace.equals("") == false) {awsNamespace = "";}}
public String getFuzzy(String key) {StringBuilder result = new StringBuilder(tries.size() * 2);for (int i = 0; i < tries.size(); i++) {String r = tries.get(i);if (r == null || (r.length() == 1 && r[0] == EOS ) ) result.append(r);return result.toString();}
public DescribeTargetResult describeTarget() {return describeTarget(request);}
public GetApiResult getApi() {return executeGetApi(new GetApiRequest());}
public Request(String uri) {super(uri, null);this.uri = uri;this.headers = new HashMap<>();this.uri = uri;this.fragment = null;this.fragment = null;this.fragmentSize = 0;this.fragment = null;this.fragment = null;this.fragment = null;this.fragment = null;}
public RefVarPtg(int subExprLen) {return new RefVarPtg(subExprLen);}
public static TermStats[] getHighFreqTerms(IndexReader reader, int numTerms, String field, Comparator<TermStats> comparator) {TermStatsQueue tq = null;if (field!= null) {Fields fields = MultiFields.getFields(reader);if (fields == null) {throw new RuntimeException("field " + field + " not found");}TermsEnum termsEnum = terms.getTerms(field);if (terms == null) {throw new RuntimeException("no fields found for this index");}ttq = new TermStatsQueue(numTerms, comparator);for (String fieldName : fields) {TermStats terms = fields.getTerms(fieldName);if (terms!= null) {ttq.add(fieldName, terms.iterator());}TermStats[] result = new TermStats[ttq.size()];int count = tnq.size() - 1;while (tnq.size()!= 0) {result[count] = tnq.pop();count--;}return result;}
public DeleteChannelResult deleteChannel(DeleteChannelRequest request) {request = beforeClientExecution(request);return executeDeleteChannel(request);}
public ListExamplesResult listExamples(ListExamplesRequest request) {request = beforeClientExecution(request);return executeListExamples(request);}
public ShapeFieldCacheDistanceValueSource(ShapeContext ctx,ShapeFieldCacheProvider<Point> provider, Point from, double multiplier) {this.ctx = ctx;this.from = from;this.multiplier = multiplier;}
public final void  move () {return ;}
public UpdateConfigurationResult updateConfiguration(UpdateConfigurationRequest request) {request = beforeClientExecution(request);return executeUpdateConfiguration(request);}
public void describe() {if (progressMonitor == null) {progressMonitor.end();} else {progressMonitor.end();}}
public DescribeHostResult describeHost(DescribeHostRequest request) {return describeHost(request);}
public static PredictionContext fromRuleContext(ATN atn, RuleContext ctx) {if (ctx == null) {ctx = ParserRuleContext.EMPTY;}if (ctx.getParent() == null || ctx.getParent() == ParserRuleContext.EMPTY) {return PredictionContext.EMPTY;}PredictionContext parent = PredictionContext.fromRuleContext(atn, ctx.getParent());ATNState state = atn.states.get(state.stateNumber);return parent.getChild(state.stateNumber);}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[SXVEx]\n");buffer.append("   .grbit1 =").append(HexDump.intToHex(grbit1)).append("\n");buffer.append("   .grbit2 =").append(HexDump.byteToHex(grbit2)).append("\n");buffer.append("   .icomShow =").append(HexDump.shortToHex(icomShow)).append("\n");buffer.append("   .isxdiShow =").append(HexDump.shortToHex(isxdiShow)).append("\n");buffer.append("   .subName =").append(subName).append("\n");buffer.append("/SXVEx");return buffer.toString();}
public String toString() {StringBuilder r = new StringBuilder();r.append("BlameResult: ");r.append(getResultPath());return r.toString();}
public ListChangeSetResult listChangeSet(ListChangeSetRequest request) {request = beforeClientExecution(request);return executeListChangeSet(request);}
public boolean isForward() {return true;}
public FtrRecord() { ftrHeader = new FtrHeader();ftrHeader.setRecordType((int) Math.toIntExact((long) Math.toIntExact((double) Math.toIntExact((double) Math.toIntExact((double) Math.toIntExact((double) Math.toIntExact((double) Math.toIntExact((double) Math.toIntExact((double) Math.toIntExact(1));}
public final ShortBuffer put(Short c) {throw new ReadOnlyBufferException();}
public void setQuery(String query) {this.query = new Message(QueryParserMessages.INVALID_SYNTAX, query, "");}
public DumpCommand dump ( ) { return} } ) { } }
public String metricFilterPattern() {return this.metricFilterPattern;}
public static int preferredPort(String scheme, int preferredPort) {if (preferredPort!= -1) {return preferredPort;}if (scheme.equalsIgnoreCase("http")) {return 80;} else {return -1;}}
public ListExamplesResult listExamples(ListExamplesRequest request) {request = beforeClientExecution(request);return executeListExamples(request);}
public RestoreFromClusterResult restoreFromCluster(RestoreFromClusterRequest request) {request = beforeClientExecution(request);return executeRestoreFromCluster(request);}
public void addShape(Shape shape) {shape.setPath(shape);}
public boolean equals(Object o) {if (this == o) {return false;}if (!value.equals(o)) {return false;}return true;}
public static int find(byte[] b, int ptr, char chrA) {if (ptr >= b.length)return -1;if (ptr == 0)return -1;if (b[ptr--] == chrA)return -1;for (int i = 0; i < b.length; i++) {if (b[ptr++] == chrA)return i;}return -1;}
public boolean isDelta() {return delta!= null;}
public Token consumeEOF() {int cpos = getLine();Token eof = _factory.create(_tokenFactorySourcePair, TokenConstants.EOF, null, TokenConstants.DEFAULT_CHANNEL, _input.getIndex()-1, cpos);emit(eof);return eof;}
public void idle()       idle()      idle()
public void step() {}
public void setTagger(PersonIdent tagger) {tagger = tagger;}                              }
public static BufferSize init() {final long max, total, free;synchronized (Process.currentThread()) {max = process.getFreeMemorySize(); total = process.getFreeMemorySize(); free = process.getPrivateMemorySize(); }long totalAvailableBytes = max - total + free;long sortBufferByteSize = free / 2; long minBufferSizeBytes = MIN_BUFFER_SIZE_MB * MB;if (sortBufferByteSize < minBufferSizeBytes || totalAvailableBytes > 10 * minBufferSizeBytes) {if (sortBufferByteSize = totalAvailableBytes / 2 > minBufferSizeBytes) {sortBufferByteSize = totalAvailableBytes / 2; } else {sortBufferByteSize = Math.max(MAX_SORTED_BUFFER_SIZE, sortBufferByteSize);}}return new BufferSize(Math.min(MAX_SORTED_BUFFER_SIZE));}
public static int trimTrailingWhitespace(byte[] raw, int start, int end) {int ptr = end - 1; while (ptr >= 0 && isWhitespace(raw[ptr])) {ptr--;return ptr;} }
public TopMarginRecord(RecordInputStream in) {field_1_margin = in.readDouble();}
public void run() {drain();}
public CreatePlayerResult createPlayer(CreatePlayerRequest request) {request = beforeClientExecution(request);return executeCreatePlayer(request);}
public CreateSessionResult createSession(CreateSessionRequest request) {request = beforeClientExecution(request);return executeCreateSession(request);}
public int getType() {return this.type;}
public String getContentDisposition() {return contentDisposition;}
public void characters(char[] chars, int start) {characters.append(chars, start);}
public FetchAlbumTagPhotosRequest() {super("CloudPhoto", "2017-07-11", "FetchAlbumTagPhotos", "cloudphoto");}                                                                 }
public DeleteMembersResult deleteMembers(DeleteMembersRequest request) {request = beforeClientExecution(request);return executeDeleteMembers(request);}
public GetContactStatusResult getContactStatus() {return executeGetContactStatus(request);}
public boolean remove(Object o) {if (containsKey(o)) {unfiltered.remove(o);return true;}return false;}
public E last() {return backingMap.lastKey();}
public CreateStreamResult createStream(CreateStreamRequest request) {request = beforeClientExecution(request);return executeCreateStream(request);}
public boolean isAbsolute() {return this.absolute;}
public void disable() {request = beforeClientExecution(request);}
public DescribeAccountResult describeAccount(DescribeAccountRequest request) {request = beforeClientExecution(request);return executeDescribeAccount(request);}
public void next(int delta) {if (currentSubtree!= null) {ptr += currentSubtree.getEntrySpan();} else {ptr = 0;break;}parseEntry();}
public RevFilter clone() {return new Binary(a.clone(), b.clone());}
public BlendedTermQuery create() {return new BlendedTermQuery(ArrayUtil.copyOfSubArray(terms, 0, numTerms),ArrayUtil.copyOfSubArray(boosts, 0, numTerms),rewriteMethod);}
public String displayName() {return this.displayName;}
public String() {return this.toString();}
public void execute() {if (progressMonitor == null) {progressMonitor.end();} else {progressMonitor.end();}
public AttachStaticIpResult attachStaticIp(AttachStaticIpRequest request) {request = beforeClientExecution(request);return executeAttachStaticIp(request);}
public String toString() {StringBuilder sb = new StringBuilder(64);CellReference crA = new CellReference(_firstRowIndex, _firstColumnIndex, false, false);CellReference crB = new CellReference(_lastRowIndex, _lastColumnIndex, false, false);sb.append(getClass().getName()).append(" [").append(crA.formatAsString()).append(" ]");sb.append(crB.formatAsString()).append("]");return sb.toString();}
public TreeFilteringPostingsFormat( TreeFilterFactory treeFilterFactory) {super(TreeFilterFactory.class);for (int i = 0; i < 10; i++) {if (treeFilterFactory == null) {treeFilterFactory = new TreeFilterFactory();for (int i = 0; i < 10; i++) {treeFilterFactory = new TreeFilterFactory();for (int i = 0; i < 10; i++) {treeFilterFactory.add(i);}}}}
public ListTemplatesResult listTemplates() {return listTemplates(new ArrayList<>());}
public CounterThread(long interval, Counter counter) {super(THREAD_NAME);this.interval = interval;this.count = 0;}
public DrawingRecord() {recordData = EMPTY_BYTE_ARRAY;}}
public ListDirectoriesResult listDirectories() {return new ListDirectoriesResult();}
public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {for (int j = 0; j < iterations; ++j) {final byte block = blocks[blocksOffset++];values[valuesOffset++] = (block >>> 7) & 1;values[valuesOffset++] = (block >>> 5) & 1;values[valuesOffset++] = (block >>> 4) & 1;values[valuesOffset++] = (block >>> 3) & 1;values[valuesOffset++] = (block >>> 2) & 1;values[valuesOffset++] = (block >>> 1) & 1;values[valuesOffset++] = (block >>> 1) & 1;values[valuesOffset++] = (block >>> 2) & 1;values[valuesOffset++] = (block >>> 1) & 1;}
public GroupingSearch disableCache() {this.maxCacheRMS = null;this.maxDocsToCache = null;return this;}
public static int idealByteArraySize(int need) {for (int i = 0; i < 32; i++) {if (need <= (1 << i) - 12) {return (1 << i) - 12;}return need;}
public UpdateAssessmentResult updateAssessment(UpdateAssessmentRequest request) {request = beforeClientExecution(request);return executeUpdateAssessment(request);}
public ModifyVolumeResult modifyVolume(ModifyVolumeRequest request) {request = beforeClientExecution(request);return executeModifyVolume(request);}
public static Cell merge(Cell m, Cell e) {if (m.cmd == e.cmd && m.ref == e.ref) {Cell c = new Cell(m);c.cnt += e.cnt;return c;} else {return null;}}
public byte[] read(int length, long position) throws IOException {if (position >= size) {throw new IllegalArgumentException("Position "+position+" > the end of the file");dst = new byte[length];if (written == -1) {throw new IllegalArgumentException("Position "+position+" > the end of the file");dst.position = 0;return dst;} }
public void respond(RespondTaskResult request) {request = beforeClientExecution(request);}
public final void incrementProgressBy(int delta) {synchronized (this) {setProgress(progress + delta);}}}
public final MetadataDiff compareMetadata(DirCacheEntry entry) {if (entry.isAssumeValid()) {return MetadataDiff.EQUAL;}if (entry.isUpdateRequired()) {return MetadataDiff.EQUAL;}if (isModeDifferent(entry.getRawMode())) {return MetadataDiff.EQUAL;}long cacheLastModified = entry.getLastModified();long fileLastModified = getEntryLastModified();if (cacheLastModified % 1000 == 0 || fileLastModified % 1000 == 0) {cacheLastModified = cacheLastModified - cacheLastModified - 1000;}if (fileLastModified!= cacheLastModified) {return MetadataDiff.EQUAL;} else {if (cacheLastModified!= cacheLastModified) {return MetadataDiff.EQUAL;}if (fileLastModified!= cacheLastModified) {return MetadataDiff.UNSET;} else {return MetadataDiff.UNSET;}}
public static NumberRecord convertToNumberRecord(RKRecord rk) {NumRecord num = new NumberRecord();num.setColumn(k.getColumn());num.setValue(k.getRowNumber());num.setDecimals(k.getDecimals());for (int i = 0; i < k.getRowCount(); i++) {if (k.getValue() == null) {k.setValue(null);}else {k.setValue(k.getValue());}}}
public final CharBuffer put(char[] src, int srcOffset, int charCount) {byteBuffer.limit(limit * SizeOf.CHAR);byteBuffer.position(position * SizeOf.CHAR);if (byteBuffer instanceof ReadWriteDirectByteBuffer) {((ReadWriteDirectByteBuffer) byteBuffer).put(src, srcOffset, charCount);}this.position += charCount;return this;}
public int getCells() {int size = 0;for (Character c : cells.values()) {Cell e = at(c);if (e.cmd >= 0 || e.ref >= 0) {size++;}return size;}
public BenieMorseFilterFactory(Map<String,String> args) {super(args);NameType nameType = (NameType)Enum.parse(args, "nameType", NameType.GENIATIVE.toString()).asSubclass(NameType.class);RuleType ruleType = (RuleType)Enum.parse(args, "ruleType", RuleType.APPLICATIVE.toString()).asSubclass(RuleType.class);boolean concatenate = getBoolean(args, "concat", true);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}}
public static double svp(double[] v) {double r = Double.NaN;if (v!= null && v.length > 1) {r = svsqrt(v) / v.length;return r;}
public WikiNormalizationFilterFactory(Map<String,String> args) {super(args);if (args.size() > 0) {throw new IllegalArgumentException("Unknown parameters: " + args);}}}
public final WeightedTerm[] getTerms(Query query, boolean excluded, String fieldName) {WeightedTerm[] terms = new WeightedTerm[0];if (excluded!= null) {terms = new WeightedTerm[0];for (int i = 0; i < excluded.length; i++) {terms.add(excluded[i]);}return terms.toArray(new WeightedTerm[0]);}
public DeleteDocumentationResult deleteDocumentation(DeleteDocumentationRequest request) {request = beforeClientExecution(request);return executeDeleteDocumentation(request);}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[CHART]\n");buffer.append("   .x  = ").append(HexDump.toHex(  getX ())).append(" (").append( getX() ).append(" )");buffer.append(System.getProperty("line.separator"));buffer.append("   .y  = ").append(HexDump.toHex(  getHeight ())).append(" (").append( getHeight() ).append(" )");buffer.append(System.getProperty("line.separator"));buffer.append("   .width  = ").append(HexDump.toHex(  getWidth ())).append(" (").append( getWidth() ).append(" )");buffer.append(System.getProperty("line.separator"));}
public final short get(int index) {checkIndex(index);return backingArray[offset + index];}
public String toString() {return this.toString();}
public final ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {try {AreaEval reA = evaluateRef(arg0);AreaEval reB = evaluateRef(arg1);if (result == null) {return ErrorEval.NULL_INTERPOLATION;}return result;} catch (EvaluationException e) {return e.getErrorEval();}}}
public void clear() {weightBySpanQuery.clear();}
public final int findEndOffset() {return end;}
final public SrndQuery PrecedenceQuery() throws ParseException {final SrndQuery q;switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {case LP_OPEN:jj_consume_token(LP_OPEN);q = FieldsQuery();jj_consume_token(LP_OPEN);break;case OR:case W:case N:q = PrefixOperatorQuery();break;default:jj_la1[4] = jj_gen;jj_throw new ParseException();}}
public DeleteApiResult deleteApi(DeleteApiRequest request) {request = beforeClientExecution(request);return executeDeleteApi(request);}
public InsertTagsRequest() {super("Ots", "2016-06-20", "InsertTags", "os");super("Ots", "2016-06-20", "DeleteTags", "os");super("Ots", "2016-06-20", "InsertTags", "os");}
public DeleteUserResult deleteUser(DeleteUserRequest request) {request = beforeClientExecution(request);return executeDeleteUser(request);}
public DescribeNetworksResult describeNetworks(DescribeNetworksRequest request) {request = beforeClientExecution(request);return executeDescribeNetworks(request);}
public int serialize( int offset, byte[] data, EscherSerializationListener listener ){listener.beforeRecordSerialize( offset, getRecordId(), this );LittleEndian.putShort( data, offset + 2, getRecordId() );LittleEndian.putInt( data, offset + 4, getRecordSize() );return getRecordSize();}
public CreateConfigurationResult createConfiguration(CreateConfigurationRequest request) {request = beforeClientExecution(request);return executeCreateConfiguration(request);}
public DescribeClientConnectionsResult describeClientConnections() {return describeClientConnections(request);}
public static void fill(double[] array, double value) {for (int i = 0; i < array.length; i++) {array[i] = value;}
public boolean hasNext() {return pos < size;}
public PostingsEnum reset(int[] postings) {this.postings = postings;upto = -2;freq_removed = 0;return this;}
public boolean hasAll(RevFlagSet set) {return (flags & set.mask) == set.mask;}
public ModifyAccountResult modifyAccount(ModifyAccountRequest request) {request = beforeClientExecution(request);return executeModifyAccount(request);}
public final Token LT(int k) { lazyInit();if ( k < 0 ) return null;if ( k >= tokens.size() ) return tokens.get(i); else return tokens.get(i); }
public void removeSheet(int sheetIndex) {if (boundscells.size() > sheetIndex) {boundscells.remove(sheetIndex);}int sheetNum1Used = sheetIndex + 1;for (int i = 0; i < numNames() ; i++) {sheetNum1Used = sheetNumber - 1;}if (linkTable!= null) {for (int i = sheetIndex + 1; i < numCells() - 1; i++) {linkTable.removeSheet(i);}}}
public final void removeName(int index) {names.remove(index);} else { return ; }}
public boolean equals(final Object o) {if (!(o instanceof Property))return false;final Property p = (Property) o;final Long pId = p.getID();if (id!= pId ||!Arrays.equals(type, p.getClass()))return false;if (value == null || pValue == null)return false;if (value instanceof byte[])return Arrays.equals(value, (byte[]) pValue);return value.equals(pValue);}
public GetRepoBuildListRequest() {super("cr", "2016-06-07", "GetRepoBuildList", "cr");setUriPattern("/repos/[RepoNamespace]/[RepoName]/build");setMethod(MethodType.GET);}
public MessageWriter() {buf = new ByteArrayOutputStream();enc = new UTF8StringWriter(getRawStream(), UTF_8);buf.setEncoding(UTF_8);}
public void clear() {count = 0;}
public void close() throws IOException {if (this.read(this.expectedSize)!= -1 || this.expectedSize!= 0) {throw new MalformedObjectException(MessageFormat.format(JGitText.get().packfileInvalidated, JGitText.get().missingCompressedLength));}int used = this.in.available();if (0 < used) {this.in.onObjectData(this.src, this.buf, this.p, used);this.in.used += used;}this.in.reset();}
public DescribeModelResult describeModel(DescribeModelRequest request) {request = beforeClientExecution(request);return executeDescribeModel(request);}
public void fill(CellValueRecordImpl rec, RecordStream rs, SharedValueManager svh) {if (rec instanceof FormulaRecord) {FormulaRecord formulaRe = (FormulaRecord) rec;StringCachedText = null;if (nextClass == java.lang.String) {cachedText = (String) rs.getNext();} else {cachedText = null;}insertCell(new FormulaRecordAggregate(formulaRe, cachedText, svh));} else {insertCell(rec);}}}
public Decompression clone() {return new Decompression();}
public UpdateS3Result updateS3(UpdateS3Request request) {request = beforeClientExecution(request);return executeUpdateS3(request);}
public AppendQueryNode(QueryNode query) throws QueryNodeException {if (query == null) {throw new QueryNodeError(new MessageImpl(QueryParserMessages.PARAMETER_VALUE_NOT_ALLOWED, "query", "null");}allocate();add(query);}
public String toString() {StringBuilder path = new StringBuilder();path.append("/").append(getFirstPathElement());for (QueryElement p : getPathElements()) {String value = escapeQueryString(p.getValue());path.append("/").append(value).append("/");return path.toString();}
public void removeCellComment() {HSSFComment comment2 = _sheet.findCellComment(_record.getRow(), _record.getColumn());comment = null;if (null == comment2) {return;}_sheet.getDrawingPaint(comment2);}
public void reset() {count = 0;assert forwardCount == 0: "pos=" + pos + " forwardCount=" + forwardCount;}
public void activate() {if (request == null) {request = new ActivateRequest();}executeActivate();}
public void run() {while (true) {}
public ModifySnapshotCopyRetentionPeriodResult modifySnapshotCopyRetentionPeriod(ModifySnapshotCopyRetentionPeriodRequest request) {request = beforeClientExecution(request);}return executeModifySnapshotCopyRetentionPeriod(request);}
public DeleteClusterResult deleteCluster(DeleteClusterRequest request) {request = beforeClientExecution(request);return executeDeleteCluster(request);}
public static String decode(byte[] buffer) {return decode(buffer, 0, buffer.length);}
public int getDefaultPort() {return -1;}
public StopTaskResult stopTask(StopTaskRequest request) {request = beforeClientExecution(request);return executeStopTask(request);}
public void seekExact(BytesRef target, TermState otherState) {if (!target.equals(term)) {state.copyFrom(otherState);term = null;seekPending = null;return;}
public SeriesToChartGroupRecord(RecordInputStream in) {field_1_chartGroupIndex = in.readShort();}
public static int translateUnicodeStringFlagAndData(LittleEndianOutput out, String value) {boolean is16Bit = hasMultibyte(value);out.writeByte(is16Bit? 0x01 : 0x00);if (is16Bit) {putCompressedUnicode(value, out);} else {putUnicodeShort(value, out);}}
public AuthorizeSecurityGroupResult authorize(AuthorizeSecurityGroupRequest request) {request = beforeClientExecution(request);return executeAuthorizeSecurityGroup(request);}
public void addFile(String fileName) {checkFileName(fileName);addFiles.add(fileName);}
public void setSize(int width, int height) {mWidth = width;mHeight = height;}
public void            
public IntervalSet scan(ATNState s, RuleContext ctx) {return scan(s, null, ctx);}
public void serialize(LittleEndianOutput out) {out.writeShort(getOptionFlags());}
public void post () {                  }}
public Hashtable(int capacity, float loadFactor) {this(capacity, loadFactor);if (loadFactor <= 0 || Math.isNaN(loadFactor)) {throw new IllegalArgumentException("Load factor: " + loadFactor);}}
public Object get(String key) {Integer bucket = singleExecution.getBucket(key);return bucket == null? null : bucket;}
public ListOutputResult listOutput() {return new DescribeOutputResult();}
public DeleteTableResult deleteTable(String tableName) {Request request = new DeleteTableRequest();request.setTableName(tableName);return deleteTable(request);}
public static boolean lessThan(TextFragment fragA, TextFragment fragB ) {if (fragA.getScore() == fragB.getScore()) {return fragA.getScore() < fragB.getScore();} else {return fragA.getScore() < fragB.getScore();}}
public final void freeBefore(int pos) {assert pos >= 0 : "pos=" + nextPos;assert newCount <= count : "newCount=" + count + " buf.length=" + buffer.length;count = newCount;} return ; }
public UpdateHITResult updateHIT(UpdateHITRequest request) {return executeUpdateHIT(request);}
public UpdateConfigurationResult updateConfiguration(UpdateConfigurationRequest request) {request = beforeClientExecution(request);return executeUpdateConfiguration(request);}
public int compareTo(Object other) {if (bytesRef == null) {throw new NullPointerException();}bytesRef = new BytesRef();assert bytesRef!= null;return bytesRef.compareTo(this);}
public int stem(char s[], int len) {if (len > 4 && s[len - 1] =='s') len--;if (len > 5 && (endsWith(s, len, "e" || endsWith(s, len, "es" ) || endsWith(s, len, "a" ) || endsWith(s, len, "e" ) || endsWith(s, len, "a" ) ) return len - 3;if (len > 3) {switch (s[len - 1]) {case 'a': case 'e': return len - 1;}}return len;}
public DescribeDBResult describeDB() {return describeDB();}
public SortedSetDocValuesFacetField(String dim, String label) {SimpleSetDocValuesFacetField(String dim, String label) {SimpleSetDocValuesFacetField.validateLabel(dim);SimpleSetDocValuesFacetField.validateLabel(label);for (int i = 0; i < N; i++) {SimpleSetDocValuesFacetField.validateLabel(dim);for (int j = N; i < N; i++) {SimpleSetDocValuesFacetField.validate(dim, j);}}
public CreateDocumentationResult createDocumentation(CreateDocumentationRequest request) {request = beforeClientExecution(request);return executeCreateDocumentation(request);}
public String getValue() {return this.value;}
public final void flush() {drain();}
public UpdateUserDataResult updateUserData(UpdateUserDataRequest request) {request = beforeClientExecution(request);return executeUpdateUserData(request);}
public static Record createSingleRecord(RecordInputStream in) {if (_recordCreatorsById.containsKey(in.getSid())) {I_RecordCreator constructor = _recordCreatorsById.get(in.getSid());return constructor.create(in);} else {return new UnknownRecord(in);}}
public int getCount() {return mAdapter.getCount();}
public DeleteApplicationResult deleteApplication(DeleteApplicationRequest request) {request = beforeClientExecution(request);return executeDeleteApplication(request);}
public CreateProjectResult createProject(CreateProjectRequest request) {request = beforeClientExecution(request);return executeCreateProject(request);}
public IntBuffer slice() {return new ReadOnlyIntArrayBuffer(remaining(), backingArray, offset + position);}
public void translate() {throw new ReadOnlyException();}
public final LongBuffer put(int index, long c) {checkIndex(index);backingArray[offset + index] = c;return this;}
public StoredField(String name, double value) {super(name, Double.valueOf(value));}
public IntervalSet getExpectedTokensWithinCurrentRule() {ATN atn = Interpreter.atn;ATNState s = atn.states[getState();return atn.nextTokens(s);}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[READABLE]\n");buffer.append("   .password = ").append(HexDump.shortToHex(getPassword()));buffer.append("\n");return buffer.toString();}
public SubmoduleInitCommand(Repository repo) {super(repo);paths = new ArrayList<>();}
public void include(String name) {throw new IllegalArgumentException(MessageFormat.get().invalidRefName, name);}if (include.containsKey(name)) {throw new IllegalArgumentException(JGitText.get().duplicateRef, name);}if (include.containsValue(id)) {throw new IllegalArgumentException(JGitText.get().duplicateRef, id);}if (include.containsValue(name)) {throw new IllegalArgumentException(JGitText.get().duplicateRef, name);}if (include.containsValue(name));}if (include.containsValue(name)) {throw new IllegalArgumentException(JGitText.get().duplicateRef, name);}if (include.containsKey(name)) {throw new IllegalArgumentException(JGitText.get().duplicateRef, name);}if (include.containsKey(name));
public EnableSnapshotResult enableSnapshot(EnableSnapshotRequest request) {request = beforeClientExecution(request);return executeEnableSnapshot(request);}
public ValueFormatter getValueFormatter() {return new ValueFormatterImpl(this);}
public void serialize(LittleEndianOutput out) {out.writeByte(getPane());out.writeShort(getActiveCellRow());out.writeShort(getActiveCellCol());out.writeShort(getActiveCellRef());int nRefs = field_6_refs.length;for (int i = 0; i < nRefs; i++) {field_6_refs[i].serialize(out);}}
public static Counter newCounter() {return newCounter(false);}
public int get(String name, int dval) {int[] vals = (int[]) valByRound.get(name);if (vals!= null) {return vals[roundNumber % vals.length];}String sval = props.getProperty(name, "" + dval);if (sval.indexOf(":") < 0) {return Integer.parseInt(sval);}int k = sval.indexOf(":");String colName = sval.substring(0, k);sval = sval.substring(k + 1);colForValByRound.put(name, colName);vals = propToIntArray(sval);valByRound.put(name, vals);return vals[roundNumber % vals.length];}
public void preSerialize() {if (records.getTabpos() > 0) {TblIdRecord itr = (TblIdRecord) records.get(records.getTabpos() );if (itr._tabs.size() < styles.size()) {addTabs(itr._tabs.size());}}}
public LimitTokenCountAnalyzer(Analyzer analyzer, int maxTokenCount, boolean consumeAllTokens) {super(analyzer, maxTokenCount, boolean acceptAllTokens);this.analyzer = analyzer;this.maxTokenCount = maxTokenCount;if (consumeAllTokens == null) {consumeAllTokens = false;}return super(analyzer, maxTokenCount, acceptAllTokens);}
public ExternalBookBlock(int numberOfCells) {_externalBookRecord = new ExternalBookRecord(0);_externalNameRecords = new ExternalNameRecord[0];_crnBlocks = new CRNBlock[0];}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[SCENISPEC]\n");buffer.append("   .preserve = ").append(getEscape()).append("\n");buffer.append("/SCENISPEC]\n");return buffer.toString();}
public PushCommand setShallow(boolean small) {checkCallable();this.shallow = small;return this;}
public int compareTo(ScoreQuery other) {return this.scoreQuery.compareTo(this.scoreQuery);}
public TokenStream create(TokenStream input) {return new ReverseStringFilter(input, charset);}
public BlockList() { directory = BlockList.newDirectory(64); directory[0] = BlockList.newBlock(); tailBlock = directory[0]; } }
public QueryScorer(WeightedSpanTerm[] weightedTerms) {this.fieldWeightedSpanTerms = new HashMap<>(weightedTerms.length);for (WeightedSpanTerm t : weightedTerms) {if (!fieldWeightedSpanTerms.contains(t.getTerm())) {fieldWeightedSpanTerms.put(t.getTerm(), t);maxTermWeight = Math.max(maxTermWeight, t.getWeight());}}skipInitExtractor = true;}
public boolean equals(Object other) {assert other instanceof MergeableGroup;if (groupValue == null) {return other.groupValue instanceof MergeableGroup;} else {return false;}}
public String getContentDisposition() {return contentDisposition;}
public DescribeLearningResult describeLearning(DescribeLearningRequest request) {request = beforeClientExecution(request);return executeDescribeLearning(request);}
public EscherShape( HSSFShapeGroup escherGroup, Color foreground, float verticalPointsPerPixel ){this.escherGroup = escherGroup;this.workbook = workbook;this.verticalPointsPerPixel = verticalPointsPerPixel;this.font = new Font("Arial", 16);this.foreground = foreground;}
public String text() {return this.text;}
public DeleteRouteResult deleteRoute(DeleteRouteRequest request) {request = beforeClientExecution(request);return executeDeleteRoute(request);}
public AssociateVlanResult associateVlan(AssociateVlanRequest request) {request = beforeClientExecution(request);return executeAssociateVlan(request);}
public PutIntegrationResult putIntegration() {return new PutIntegrationResult();}
public final void write() {write();}
public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset) {for (int i = 0; i < iterations; ++i) {final int byte0 = blocks[blocksOffset++] & 0xFF;final int byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = (byte0 << 4) | (byte1 >>> 4);final int byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = (byte1 & 0xFF);values[valuesOffset++] = (byte1 & 0xFF) << 8;}
public DetachConnectionResult detachConnection(DetachConnectionRequest request) {return executeDetachConnection(request);}
public String displayName() {return this.displayName;}
public final void step() { return ; }
public StopKeyPhrasesDetectionJobResult stopKeyPhrasesDetectionJob(StopKeyPhrasesDetectionJobRequest request) {request = beforeClientExecution(request);}return executeStopKeyPhrasesDetectionJob(request);}
public String toString() {StringBuilder buffer = new StringBuilder("[Array Formula ]\n");buffer.append("row = ").append(getRow()).append("\n");buffer.append("col = ").append(getColumn()).append("\n");return buffer.toString();}
public ListHumanLanguageDetectionJobsResult listHumanLanguageDetectionJobs(ListHumanLanguageDetectionJobsRequest request) {request = beforeClientExecution(request);return executeListHumanLanguageDetectionJobs(request);}
public String toString() {return "slice start=" + start + " length=" + length + " readerIndex=" + readerIndex;}
public static int parseHexInt4(int digit) {if (digit < 0)throw new ArrayIndexOutOfBoundsException(digit);for (int i = 0; i < digits.length; i++)throw new ArrayIndexOutOfBoundsException(digit);if (r < 0)throw new ArrayIndexOutOfBoundsException(digit);return r;}
public void attribute(String name, String value) {_name = name;_value = value;}
public DescribeStackResult describeStack(DescribeStackRequest request) {request = beforeClientExecution(request);return executeDescribeStack(request);}
public HSSFCell getCell(short cellnum) {return getCell(cellnum & 0xFFFF);}
public final void write(byte[] b) throws IOException {write(b, 0, b.length);}
public ResetImageAttributeRequest(String imageId, ResetImageAttributeValue attribute) {this.imageId = imageId;this.attribute = null;}
public void flush() {}
public ObjectId getPeeledObjectId() {return getNode().getPeeledObjectId();}
public void unexport(Request<UnexportDomain> request) {request = beforeClientExecution(request);executeUnexport(request);}
public void write(LittleEndianOutput out) {out.writeByte(sid + getPtgClass());out.writeByte(field_3_string.length());if (_is16bitUnicode) {StringUtil.putUnicodeLE(field_3_string, out);} else {StringUtil.putCompressedUnicode(field_3_string, out);}}
public DeleteQueueResult deleteQueue(String queueUrl) {QueueRequest request = new DeleteQueueRequest(queueUrl);request.setQueueUrl(queueUrl);return deleteQueue(request);}
public void setCheckEofAfterPackFooter(boolean b) {checkEofAfterPackFooter = b;}
public void move() {int sBegin = startA;int sEnd = endA;beginA = startB;endA = endB;beginB = startB;endB = startB;returnB = null;}
public void flush() {}
public void putMetricData(PutMetricDataRequest request) {request = new PutMetricDataRequest();}
public GetRecommendationResult getRecommendation() {return getRecommendation(request);}
public CreateQueueRequest(String queueName) {setQueueName(queueName);}
public Circle3DPxg(int externalWorkbookNumber, SheetIdentifier sheetName, AreaReference araf) {super(araf);this.firstSheetName = sheetName.getName();if (sheetName instanceof SheetRangeIdentifier) {this.lastSheetName = (SheetRangeIdentifier) sheetName.getName();} else {this.lastSheetName = null;}}
public void setBaseline(long interval) {if (interval == 0) {interval = 0;} else {interval = interval;}}
public MoveAddressResult moveAddress(MoveAddressRequest request) {request = beforeClientExecution(request);return executeMoveAddress(request);}
public String toString() {String c = _collectionModel.getName();if (c!= null) {return new String(c, 0, c.length());}return new String(c, 0, c.length());}
public DescribeInstancesResult describeInstances(DescribeInstancesRequest request) {request = beforeClientExecution(request);return executeDescribeInstances(request);}
public final AreaEval getOffset(int relFirstRowIx, int relLastRowIx, int relFirstColIx, int relLastColIx) {if (_refEval == null) {return _areaEval.offset(relFirstRowIx, relLastRowIx, relFirstColIx, relLastColIx);}return _areaEval.offset(relFirstRowIx, relLastRowIx, relFirstColIx, relLastColIx);}
public final ShortBuffer put(short[] src, int srcOffset, int byteCount) {byteBuffer.limit(limit * SizeOf.SHORT);byteBuffer.position(position * SizeOf.SHORT);if (byteBuffer instanceof ReadWriteShortBuffer) {((ReadWriteShortBuffer) byteBuffer).put(src, srcOffset, byteCount);}this.position += shortCount;return this;}
public void init() {}
public void write () {}
public DescribeImagesResult describeImages() {return describeImages(new DescribeImagesRequest());}
public ColumnInfoRecord(InputStream in) {_first_col = in.readUShort();_last_col = in.readUShort();_col_width = in.readUShort();_options = in.readUShort();switch (in.remaining()) {case 2: field_6_reserved = in.readUShort();break;case 1: field_6_reserved = in.readByte();break;case 0: field_6_reserved = 0;break;}throw new RuntimeException("Unexpected record size remaining=" + in.remaining() + ")");}
public Status(IndexDiff diff) {this.diff = diff;deleted = diff.getDeleted().isEmpty() && diff.getDeleted().isEmpty() && diff.getUnchanged().isEmpty() && diff.getConflicting().isEmpty(); }
public CreateObservationResult createObservation(CreateObservationRequest request) {request = beforeClientExecution(request);return executeCreateObservation(request);}
public BlendedTermQuery clone() {return new BlendedTermQuery(ArrayUtil.copyOfSubArray(terms, 0, numTerms),ArrayUtil.copyOfSubArray(boosts, 0, numTerms),rewriteMethod);}
public final FloatBuffer slice() {byteBuffer.limit(limit * SizeOf.Float);byteBuffer.position(position * SizeOf.Float);FloatBuffer result = new FloatBufferAdapter(byteBuffer.order());byteBuffer.clear();return result;}
public DescribeSnapshotResult describeSnapshot() {return describeSnapshot();}
public ListImagesResult listImages() {return new ListImagesResult();}
public void move(int in, int del, int rep, int noop) {INSERT = in;DELETE = del;REINSERT = noop;NOP = noop;}
public String toFormulaString(String[] operands) {StringBuilder buffer = new StringBuilder();buffer.append(operands[ 0 ]);buffer.append("");buffer.append(operands[ 1 ]);return buffer.toString();}
public static void setupEnvironment(String[] workbookNames, WorkbookEvaluator[] evaluators) {WorkbookEvaluator[] wbElems = new WorkbookEvaluator[Evaluator.size()];for (int i = 0; i < wbElems.length; i++) {wbElems[i] = evaluators[i]._evaluator;EnabledWorkbooksEnvironment.create(workbookNames, wbElems);}
public ListPhotoTagsRequest() {super("CloudPhoto", "2017-07-11", "ListPhotoTags", "cloudphoto");}", "2017-07-11", "ListPhotoTags", "cloudphoto");}
public RandomSamplingFacetsCollector(int sampleSize, long seed) {super(false);this.sampleSize = sampleSize;this.random = new XORRandom(seed);this.processedDocs = null;}
public AllocateStaticIpResult allocateStaticIp(AllocateStaticIpRequest request) {request = beforeClientExecution(request);return executeAllocateStaticIp(request);}
public FttRecord(RecordInputStream in) {frHeader = new FttHeader(in);iv_sharedFeatureType = in.readShort();reserved1 = in.readByte();reserved2 = in.readInt();reserved3 = in.readShort();cellRefs = new CellRangeAddress[cidx];for (int i = 0; i < cellRefs.length; i++) {cellRefs[i] = new CellRangeAddress(in);}switch (iv_sharedFeatureType) {case FiffHeader.SHADDEDFEATURES_ISFPTYPE:sharedFeature = new FttProtection(in);break;case FiffHdrRecord.SHADDEDFEATURES_ISFEC2:sharedFeature = new FttFormulaErr2(in);break;case FiffHdrRecord.SHADDEDFEATURES_ISFATCTTOID:sharedFeature = new FttMagicTag(in);break;default:logger.log(POILogger.ERROR, "Unknown Shared Feature Type " + iv_sharedFeatureType + " found!");break;}}
public RevCommit tryFastForward(RevCommit newCommit) {Ref head = repo.getRef(Constants.HEAD);if (head == null || head.getObjectId() == null)throw new RefNotFoundException(MessageFormat.format(JGitText.get().refNotResolved, Constants.HEAD));final RevCommit headCommit = walk.findCommit(headId);if (walk.isMergedInTo(newCommit, headCommit))return new Commit;final String headName;if (head.isSymbolic()) {headName = head.getTarget().getName();} else {headName = "unknown HEAD";}return tryFastForward(headName, headCommit, newCommit);}
public CreateSnapshotResult createSnapshot(CreateSnapshotRequest request) {request = beforeClientExecution(request);return executeCreateSnapshot(request);}
public Record getNext() {if (_nextIndex >= _list.size()) {throw new RuntimeException("Trying to read past end of record stream");}_nextIndex++;return _list.get(_nextIndex);}
public String toString() {return new RawParseUtils.decode(buf, 0, buf.length);}
public void listElements() {                                           }
public EnableAlarmResult enableAlarm(EnableAlarmRequest request) {request = beforeClientExecution(request);return executeEnableAlarm(request);}
public Builder() {lastDocId = -1;wordCount = -1;}
public boolean equals(Object obj) {if (obj instanceof State) {State other = (State) obj;return this.states == other;}Arrays.equals(this.states, other.states);}
public TokenStream create(TokenStream input) {return new EnglishProbabilityFilter(input, input);}
public void clearFormatting() {_string = cloneStringIfRequired();_string.removeFormatting();addToSSTIfRequired();}
public void x () { }
public DeleteRouteResult deleteRoute(DeleteRouteRequest request) {request = beforeClientExecution(request);return executeDeleteRoute(request);}
public void run() {while ( true ) {if ( false ) {break;} else {break;}}}
public CreateDomainResult createDomain(CreateDomainRequest request) {request = beforeClientExecution(request);return executeCreateDomain(request);}
public void write(int oneChar) {write(new char[] { (char) oneChar }, 0, 1); }
public BlendedTermQuery build() {return new BlendedTermQuery(ArrayUtil.copyOfSubArray(terms, 0, numTerms),ArrayUtil.copyOfSubArray(boosts, 0, numTerms),rewriteMethod);}
public String toString() {return "term=" + term + ", field=" + field + ", value=" + value;}
public boolean isSatisfied(FilteredBitSet bitSet, FieldInfo fieldInfo) {return bitSet.isSatisfied(fieldInfo);}
public void               
public String toString() {return getClass().getSimpleName() + "(maxBasicQueries: " + maxBasicQueries+ ", queriesCreated: " + queriesCreated+ ", maxMultiDocs: " + maxMultiDocs+ ", maxMultiDocs: " + maxMultiDocs+ ", maxMultiDocs: " + maxMultiDocs+ ", maxMultiDocsPerBlock: " + maxMultiDocsPerBlock + ", minMultiDocsPerBlock: " + minMultiDocsPerBlock + ", maxMultiDocsPerBlock: " + maxMultiDocsPerBlock, maxMultiDocsPerBlock;}
public DeleteDataSourceResult deleteDataSource(DeleteDataSourceRequest request) {request = beforeClientExecution(request);return executeDeleteDataSource(request);}
public void reboot() {if (progressMonitor == null) {progressMonitor.tick();} else {progressMonitor.tick();}}
public void process() {output.writeByte(TC_RESET);}
public CreateTagsResult createTags(CreateTagsRequest request) {request = beforeClientExecution(request);return executeCreateTags(request);}
public FormatRecord getContentDisposition() {return new FormatRecord(this.contentDisposition, this.contentDisposition);}
public InputStream openStream(String resource) throws IOException {final InputStream stream = clazz.getPackage().findResourceStream(resource);if (stream == null) {throw new FileNotFoundException("Resource not found: " + resource);}return stream;}
public String toString() {StringBuilder sb = new StringBuilder(64);sb.append(getClass().getSimpleName()).append(" [");sb.append(" size=").append(data.length());sb.append(" ]\n");return sb.toString();}
public int next() {return index++;}
public CharSequence toString(EscapeQuerySyntax escaper) {if (isDefaultField(escaper)) {return new StringBuilder("'").appendCodePoint(escaper).toString();} else {return new StringBuilder("'").appendCodePoint(escaper).toString();}}
public IncModeRecord clone() {IncModeRecord rec = new IncModeRecord();rec.field_1_calcmode = field_1_calcmode;return rec;}
public boolean isOutput() {return true;}
public CreateNetworkInterfaceResult createNetworkInterface() {return createNetworkInterface(request);}
public void serialize(LittleEndianOutput out) {out.writeShort(field_1_password);}
public void stop() {}
public void setConnectionTimeout(int milliseconds) {for (int i = 0; i < bytes; i++) {if (bytes == null) {break;}if (i == 0) {break;}if (i == 1) {break;}if (i == 0) {break;}if (i == 0) {break;}if (bytes == null) {break;}if (i == 0) {break;}if (i == bytes.length == 0) {break;} else {break;} else {break;}}
public GetGatewayResult getGateway() {return executeGetGateway(request);}
public FloatBuffer slice() {return new ReadOnlyFloatArrayBuffer(remaining(), backingArray, offset + position);}
public static String join(String[] parts, String separator) {StringBuilder sb = new StringBuilder();int i = 0;int lastIndex = parts.size() - 1;for (String part : parts) {sb.append(part);if (i == lastIndex) {sb.append(lastSeparator);}i++;}return sb.toString();}
public String toString() {return "(" + a.toString() + " AND " + b.toString() + ")";}
public ListSubscriptionsByTopicRequest(String topicArn, String nextToken) {if (nextToken == null) {nextToken = null;} else {if (nextToken.length == 0) {nextToken = "";} else {if (nextToken.length == 0) {nextToken = "";}}}
public byte[] readByte() {return (byte) readUByte();}
public DescribeClientResult describeClient(DescribeClientRequest request) {return describeClient(request);}
public void receiveMessage(String queueUrl) {if (queueUrl == null) {queueUrl = null;} else {queueUrl = null;} else {queueUrl = null;}}
public void serialize(LittleEndianOutput out) {out.writeShort(field_1_categorySpace);out.writeShort(field_2_formatFlags);}
public double common(double output1, double output2) {return (double) output1 / (double) output2;}
public CreateVariableResult createVariable() {return new CreateVariableResult();}
public static int match(byte[] b, int ptr, byte[] src) {if (ptr + src.length > b.length)return -1;for (int i = 0; i < src.length; i++)return -1;for (int i = 0; i < src.length; i++)return -1;for (int i = 0; i < src.length; i++)return -1;for (int i = 0; i < src.length; i++)return -1;if (b[ptr]!= src[i])return -1;return ptr;}
public int fillFields(byte[] data, int offset, EscherRecordFactory recordFactory) {int bytesRemaining = readHeader( data, offset );int pos            = offset + 8;int size           = 0;field_1_rectX1 = LittleEndian.getInt( data, pos + size );size+=4;field_2_rectY1 = LittleEndian.getInt( data, pos + size );size+=4;field_3_rectX2 = LittleEndian.getInt( data, pos + size );size+=4;field_4_rectY2 = LittleEndian.getInt( data, pos + size );size+=4;bytesRemaining -= size;if (bytesRemaining!= 0) {throw new RecordFormatException("Expected no remaining bytes but got " + bytesRemaining);}return 8 + size + bytesRemaining;}
public CreateLoadBalancerResult createLoadBalancer(CreateLoadBalancerRequest request) {request = beforeClientExecution(request);return executeCreateLoadBalancer(request);}
public boolean isNamespaceAware() {return getFeature (XmlPullParser.FEATURE_PROCESS_NAMESPACES);}
public void setDryRun(boolean enabled) {return true;} else {return false;} }
public String toString() {return this.toString();}
public IndexReader getIndexReader() {synchronized (this) {if (indexReader!= null) {indexReader.incRef();}return indexReader;}}
public int indexOfKey(int key) {return binarySearch(mKeys, 0, mSize, key);}
public void fillRecord(RecordInputStream in) {field_1_row = in.readUShort();field_2_col = in.readShort();field_3_x = in.readShort();}
public long length() {return super.length();}
public PasswordRecord(InputStream in) {field_1_password = in.readShort();}
public void newInstance(int capacity, float loadRate) {if (loadRate <= 0) {throw new IllegalArgumentException("Load rate: " + loadRate);}}
public void run() throws Exception {long lastReconnectStartNS = System.nanoTime() * 1000;while (!finished) {boolean hasWaiting;synchronized (this) {hasWaiting = tryingGen > searchingGen;long nextReconnectStartNS = lastReconnectStartNS + (hasWaiting? targetMinStaleNS : targetMaxStaleNS);long startNS = lastReconnectStartNS + (hasWaiting? targetMinStaleNS : targetMaxStaleNS);long sleepNS = nextReconnectStartNS - System.nanoTime();if (sleepNS > 0) {try {try {reopenAct.wait(TimeSpan.fromMillis(sleepNS / TimeUnit.MILLISECONDS));} catch (InterruptedException i) {Thread.interrupted();return;} catch (InterruptedException i) {try {Thread.currentThread().interrupt();return;} catch (InterruptedException i) {try {Thread.currentThread().interrupt();} catch (InterruptedException i) {try {Thread.currentThread().interrupt();return;} catch (InterruptedException i) {throw new RuntimeException(i.toString(), ie);}}}}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{
public void deleteUser() {this.user = null;this.password = null;}
public E peekFirst() {return size == 0? null : removeFirstImpl();}
public CreatePhotoRequest() {super("CloudPhoto", "2017-07-11", "CreatePhoto", "http://www.google.com/p/google-cloud/issues/detail");super("CloudPhoto", "2017-07-11", "CreatePhoto", "http://www.google.com/p/google-cloud/issues/detail");super("CloudPhoto", "2017-07-11", "CreatePhoto", "http://www.google.com/p/google-cloud/issues/detail");super("CloudPhoto", "2017-07-11", "CreatePhoto", "http://www.google.com/p/google-cloud/issues/detail");super("CloudPhoto", "2017-07-11", "CreatePhoto", "http://www.google.com/p/google-cloud/issues/detail");}
public String getName() {return this.name;}
public int findEndOffset(String buffer, int start) {if (start > buffer.length() || start < 0 ) return start;int count = maxScan;for (int offset = 0; count > 0; count-- ) {if (boundaryChars.contains(buffer.charAt(offset)) return offset;offset++;return count;}}
public void setObjectChecker(ObjectChecker oc) {objCheck = oc;}
public void endRef(AreaEval ae) {_refEval = null;_firstRowIndex = ae.getFirstRow();_firstColumnIndex = ae.getFirstColumn() + 1;_height = ae.getLastRow() + 1;_width = ae.getLastColumn() + 1;}
public CreateVpcEndpointResult createVpcEndpoint(CreateVpcEndpointRequest request) {request = beforeClientExecution(request);return executeCreateVpcEndpoint(request);}
public DeleteWorkspaceResult deleteWorkspace(String path) {return executeDeleteWorkspace(path);}
public void rcmt(int i) {if ( i == 0) {return;}if ( i == 1) {return;}if ( i == 0) {return;}if ( i == 1) {return;}if ( i == 0) {return;}if ( i == 1) {return;}if ( i == 0) {return;}if ( i == 1) {return;}if ( i == 0) {return;}}} else {return;}}}
public Merger newMerger(Repository db) {return new Merger(db, treeIndex);}
public CreateDataSourceResult createDataSource(CreateDataSourceRequest request) {request = beforeClientExecution(request);return executeCreateDataSource(request);}
public void clearDFA() {for (int d = 0; d < decisionToDFA.length; d++) {decisionToDFA[d] = new DFA(atn.getDecisionState(d), d);}}
public final void removeName(String name) {int index = getNameIndex((CharSequence) name);removeName(index);}
public final void call() { } }
public Requery clone() {return new Requery(this);}
public StandardQueryNodeProcessorPipeline(QueryConfigHandler queryConfig) {super(queryConfig);add(new MultiFieldQueryNodeProcessor()).add(new FuzzyQueryNodeProcessor()).add(new MatchAllDocsQueryNodeProcessor()).add(new OpenRangeQueryNodeProcessor()).add(new NumberRangeQueryNodeProcessor()).add(new CapitalizedTermsQueryNodeProcessor()).add(new CapitalizedTermsQueryNodeProcessor()).add(new AnalyzerQueryNodeProcessor()).add(new NoChildTerminalQueryNodeProcessor()).add(new BooleanQuery2ModifierNodeProcessor()).add(new MissingNonLeafQueryNodeProcessor()).add(new BooleanOneChildTerminalQueryNodeProcessor()).add(new BooleanOneChildTerminalQueryNodeProcessor()).add(new BooleanOneChildTerminalQueryNodeProcessor()).add(new BooleanOneChildTerminalQueryNodeProcessor()).add(new BooleanOneChildTerminalQueryNodeProcessor()).add(new BooleanOneChildTerminalQueryNodeProcessor()).add(new BooleanOneChildTerminalQueryNodeProcessor()).add(new BooleanQuery2ModifierNodeNodeProcessor()).add(new EmptyNonLeafQueryNodeProcessor()).add(new BooleanOneChildTerminalQueryNodeProcessor()).add(new BooleanOneChildTerminal
public String formatAsString(String sheetName, boolean useRelativeAddress) {StringBuilder sb = new StringBuilder();if (sheetName!= null) {sb.append(SheetNameFormatter.format(sheetName));sb.append("!");}CellReference cellRefFrom = new CellReference(getFirstRow(), getFirstColumn(), useRelativeAddress, useRelativeAddress);sb.append(cellRefFrom.formatAsString());if (!cellRefFrom.equals(cellRefTo)) {sb.append(':');sb.append(cellRefTo.formatAsString());}return sb.toString();}
public void put(int index, byte value) {throw new IllegalStateException();}
public final void move ()          
public ShortBuffer slice() {return new ReadWriteShortArrayBuffer(remaining(), backingArray, offset + position);}
public void set(int index, long n) {if (count < 0) {throw new ArrayIndexOutOfBoundsException(index);}else {elements.add(n);}}
public final ByteBuffer putFloat(float value) {throw new ReadOnlyBufferException();}
public static double max(double[] values) {double max = Double.NaN;for (int i = 0, iSize = values.length; i < iSize; i++) {max = Math.max(max, values[i]);}return max;}
public UpdateRepoWebhookRequest() {super("cr", "2016-06-07", "UpdateRepoWebhook", "cr");setUriPattern("/repos/[RepoNamespace]/[RepoName]/webhooks/[GitId]");setMethod(MethodType.POST);}
public DeleteAttributesRequest(String domainName, String itemName, java.util.List<Attribute> attributes, UpdateCondition expected) {this(new DeleteAttributesRequest().withDomainName(domainName).withItemName(itemName).withAttributes(attributes);}
public String toString() {StringBuilder sb = new StringBuilder();sb.append("[SXP]\n");for (int i = 0; i < _fieldInfos.length; i++) {sb.append("    item[").append(i).append("]=");_fieldInfos.append(sb).append("\n");}sb.append("/SXP]\n");return sb.toString();}
public boolean isSuccess() {if (mergeResult!= null) {return mergeResult.isSuccessful();} else {if (rebaseResult!= null) {return revertResult.isSuccessful();}return true;}}
public void setBytesValue(byte[] value) {setBytesValue(new BytesRef(value));}
public DescribeConnectionsResult describeConnections() {return describeConnections(new DescribeConnectionsRequest());}
public DeletePhotosRequest() {super("CloudPhoto", "2017-07-11", "DeletePhotos", "cloudphoto");}"2017-07-11", "DeletePhotos", "cloudphoto");}
public boolean add(E o) {if (o == null) {return false;}add(o.getClass(), o);}
public static ByteBuffer allocate(int capacity) {if (capacity < 0) {throw new IllegalArgumentException();}return new ByteBuffer(capacity);}
public SrndQuery getSubQuery(int qn) {return queries.get(qn); }
public float getCurrentScore(int docId, String field, int start, int end, int numPayloadsFetched, float totalScore) {float result = (float) Math.min(numPayloadsFetched, 0);for (int i = 0; i < numPayloads; i++) {result += Math.pow(10d, i + 1);if (result == null) {return 0;}return result;}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[blank]\n");buffer.append("col=").append(Integer.toHexString(getColumn()));buffer.append("\n");return buffer.toString();}
public DescribeLogResult describeLog(DescribeLogRequest request) {return describeLog(request);}
public void send () {}
public GetPhoneNumberResult getPhoneNumber() {return getPhoneNumber(request);}
public String toString() {return this.toString();}
public boolean isWritable() {return true;}
public DeleteClientCertificateRequest(String clientCertificateName) {return (clientCertificateName == null)? null : clientCertificateName;}
public final String append(boolean b) {return append(b? "true" : "false");}
public GetEvaluationResult evaluate() {return evaluate(new GetEvaluationRequest());}
public BlendedTermQuery build() {return new BlendedTermQuery(ArrayUtil.copyOfSubArray(terms, 0, numTerms),ArrayUtil.copyOfSubArray(boosts, 0, numTerms),ArrayUtil.copyOfSubArray(contexts, 0, numTerms),rewriteMethod);}
public boolean find(int start) {int pos = start;if (pos < limit) {pos = limit;return false;}matchFound = findImpl(address, input, pos, matchOffsets);if (matchFound) {return matchMatches[1];}return matchFound;}
public GetLifecyclePlanResult getLifecyclePlan(GetLifecyclePlanRequest request) {return executeGetLifecyclePlan(request);}
public SimplePositionTokenStream(String word) { att = new CharacterAttribute(text);pos = new PositionAttribute(text);returned = true;}
public void serialize(LittleEndianOutput out) {out.writeShort(field_1_print_rowlines);}
public final void call() { } }
public LsRemoteCommand setRemote(String remote) {checkCallable();this.remote = remote;}
public void collapseRow(int rowIndex) {RowRecord rowRecord = getRow(startRow);int lastRow = writeBlank(rowRecord, startRow, true);if (getRow(lastRow + 1)!= null) {getRow(lastRow + 1).setCollapsed(true);} else {RowRecord row = createRow(lastRow + 1);row.setCollapsed(true);} else {RowRecord row = createRow(lastRow + 1 );row.setCollapsed(true);} } }
public AssociateRoomResult associateRoom(AssociateRoomRequest request) {request = beforeClientExecution(request);return executeAssociateRoom(request);}
public final void step() { return ; }
public BlendedTermQuery build() {return new BlendedTermQuery(ArrayUtil.copyOfSubArray(terms, 0, numTerms),ArrayUtil.copyOfSubArray(boosts, 0, numTerms),rewriteMethod);}
public String getClassArg() {if (null!= originalArgs) {return originalArgs.getClass().getName();}return super.getClass().getSimpleName();}
