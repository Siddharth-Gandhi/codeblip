['public int intersection(List<Integer> a, List<Integer> b) {List<Integer> result = new ArrayList<Integer>();for (Integer i : a) {if (b']
['public String toString(long value) {StringBuilder sb = new StringBuilder();boolean negative = false;if (value < ']
['public int compare(Object[] a, Object[] b) {int result = a.length - b.length;if (result != ']
['public List<String> flatten(List<String> list) {List<String> flattened = new ArrayList<String>();for (String s : list) {if (s']
['public int compare(char[] left, int leftStart, int leftEnd, char[] right, int rightStart, int rightEnd) {int leftLength = leftEnd - leftStart;']
['public boolean add(CharsRef term) {if (terms.containsKey(term)) {return false; }else {terms.put(term, term);return true;']
['public int hashCode(char[] s, int start, int len) {int h = ']
['public Set<ATNConfig> removeAllConfigs(Set<ATNConfig> configs) {Set<ATNConfig> alts = new LinkedHashSet<ATNConfig']
['public boolean containsAll(IntList other) {for (int i = other.start; i <= other.end; i++) {if (!contains(i)) {return false;}}']
['public int remove(int index) {if (index >= size) {throw new IndexOutOfBoundsException("Index: " + index + ", Size: " + size);}if (']
['public List<Cell> getCells(int row, int col) {List<Cell> cells = new ArrayList<>();Cell c = new Cell(row, col);cells.add(']
['public int compare(int[] a, int[] b) {if (a.length != b.length) {return a.length - b.length;}for (int i = ']
['public int find(int[] array, int start, int end, int value) {for (int i = start; i < end; i++) {if (array[i] ==']
['public int replace(char[] text, int start, int end, char[] replace, int replaceStart, int replaceEnd) {for (int i = replaceStart; i < replaceEnd']
['public int compare(String s1, String s2) {int len = Math.min(s1.length(), s2.length());for (int i = ']
['public synchronized void put(K key, V value) {if (key == null || value == null) {throw new NullPointerException();} int hash = key.hashCode();']
