['public static void or(int[] arr, int start, int end, int value) {for (int i = start; i < end; i++)arr[i] |= value']
['public int intersection(List<Integer> a, List<Integer> b) {List<Integer> result = new ArrayList<Integer>();for (Integer i : a) {if (b']
['public int compare(int[] a, int[] b) {for (int i=0; i<a.length; i++) {int diff = a[i] - b[']
['public String toString(long value) {StringBuilder sb = new StringBuilder();boolean negative = false;if (value < ']
['public int compare(Object[] a, Object[] b) {int result = a.length - b.length;if (result != ']
['public int compare(int[] a, int aStart, int[] b, int bStart, int length) {int aEnd = aStart + length;int bEnd = bStart']
['public List<String> flatten(List<String> list) {List<String> flattened = new ArrayList<String>();for (String s : list) {if (s']
['public int compare(char[] left, int leftStart, int leftEnd, char[] right, int rightStart, int rightEnd) {int leftLength = leftEnd - leftStart;']
['public int hashCode(char[] s, int start, int len) {int h = ']
['public static List<Integer> intersection(List<Integer> a, List<Integer> b) {List<Integer> result = new ArrayList<Integer>();if (a==null || b']
['public int remove(int index) {if (index >= size) {throw new IndexOutOfBoundsException("Index: " + index + ", Size: " + size);}if (']
['public int compare(int[] a, int[] b) {if (a.length != b.length) {return a.length - b.length;}for (int i = ']
['public int replace(char[] text, int start, int end, char[] replace, int replaceStart, int replaceEnd) {for (int i = replaceStart; i < replaceEnd']
['public int compare(String s1, String s2) {int len = Math.min(s1.length(), s2.length());for (int i = ']
['public int compare(String lhs, String rhs) {if (lhs == null) {if (rhs == null) {return ']
['public boolean compare(char[] a, char[] b) {if (a == null && b == null)return true;if (a == null || b == null)return false;']
['public List<Chunk> mergeChunks(List<Chunk> chunks) {List<Chunk> result = new ArrayList<>();for (Chunk chunk : chunks) {']
['public boolean equals(String str) {if (str == null)return false;int len = str.length();if (len != pattern.length())return false;for (int i']
['public boolean removeAll(Collection<?> c) {for (Iterator<?> i = c.iterator(); i.hasNext(); ) {if (!remove(i.next())) {return']
['public static List<Integer> intersect(List<Integer> a, List<Integer> b) {if (a == null || b == null) {return a;}List<Integer>']
['public static List<ATNConfig> removeAllConfigs(List<ATNConfig> configs, Predicate<ATNConfig> configPredicate) {List<ATNConfig']
['public int intersect(List<Interval> intervals) {int n = intervals.size();int[] starts = new int[n];int[] ends = new int[n];for (int']
